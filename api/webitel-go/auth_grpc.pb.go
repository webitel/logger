// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: auth.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SA_Login_FullMethodName          = "/api.SA/Login"
	SA_Logout_FullMethodName         = "/api.SA/Logout"
	SA_ReadSession_FullMethodName    = "/api.SA/ReadSession"
	SA_SearchSessions_FullMethodName = "/api.SA/SearchSessions"
	SA_Current_FullMethodName        = "/api.SA/Current"
	SA_CreateSession_FullMethodName  = "/api.SA/CreateSession"
)

// SAClient is the client API for SA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// [A]uthorization service
type SAClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// rpc Token(SessionRequest) returns (SessionResponse) {}
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...grpc.CallOption) (*ReadSessionResponse, error)
	SearchSessions(ctx context.Context, in *SearchSessionsRequest, opts ...grpc.CallOption) (*SearchSessionsResponse, error)
	// Verify X-Access-Token authorization credentials
	Current(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*Authorization, error)
	// Cluster internal USE ONLY ! DO NOT EXPOSE TO public API gateway !
	CreateSession(ctx context.Context, in *SessionLoginRequest, opts ...grpc.CallOption) (*Session, error)
}

type sAClient struct {
	cc grpc.ClientConnInterface
}

func NewSAClient(cc grpc.ClientConnInterface) SAClient {
	return &sAClient{cc}
}

func (c *sAClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, SA_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, SA_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) ReadSession(ctx context.Context, in *ReadSessionRequest, opts ...grpc.CallOption) (*ReadSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadSessionResponse)
	err := c.cc.Invoke(ctx, SA_ReadSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) SearchSessions(ctx context.Context, in *SearchSessionsRequest, opts ...grpc.CallOption) (*SearchSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchSessionsResponse)
	err := c.cc.Invoke(ctx, SA_SearchSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) Current(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*Authorization, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authorization)
	err := c.cc.Invoke(ctx, SA_Current_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sAClient) CreateSession(ctx context.Context, in *SessionLoginRequest, opts ...grpc.CallOption) (*Session, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Session)
	err := c.cc.Invoke(ctx, SA_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SAServer is the server API for SA service.
// All implementations must embed UnimplementedSAServer
// for forward compatibility.
//
// [A]uthorization service
type SAServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// rpc Token(SessionRequest) returns (SessionResponse) {}
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	ReadSession(context.Context, *ReadSessionRequest) (*ReadSessionResponse, error)
	SearchSessions(context.Context, *SearchSessionsRequest) (*SearchSessionsResponse, error)
	// Verify X-Access-Token authorization credentials
	Current(context.Context, *VerifyTokenRequest) (*Authorization, error)
	// Cluster internal USE ONLY ! DO NOT EXPOSE TO public API gateway !
	CreateSession(context.Context, *SessionLoginRequest) (*Session, error)
	mustEmbedUnimplementedSAServer()
}

// UnimplementedSAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSAServer struct{}

func (UnimplementedSAServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSAServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedSAServer) ReadSession(context.Context, *ReadSessionRequest) (*ReadSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSession not implemented")
}
func (UnimplementedSAServer) SearchSessions(context.Context, *SearchSessionsRequest) (*SearchSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSessions not implemented")
}
func (UnimplementedSAServer) Current(context.Context, *VerifyTokenRequest) (*Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Current not implemented")
}
func (UnimplementedSAServer) CreateSession(context.Context, *SessionLoginRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSAServer) mustEmbedUnimplementedSAServer() {}
func (UnimplementedSAServer) testEmbeddedByValue()            {}

// UnsafeSAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SAServer will
// result in compilation errors.
type UnsafeSAServer interface {
	mustEmbedUnimplementedSAServer()
}

func RegisterSAServer(s grpc.ServiceRegistrar, srv SAServer) {
	// If the following call pancis, it indicates UnimplementedSAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SA_ServiceDesc, srv)
}

func _SA_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SA_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SA_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_ReadSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).ReadSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SA_ReadSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).ReadSession(ctx, req.(*ReadSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_SearchSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).SearchSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SA_SearchSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).SearchSessions(ctx, req.(*SearchSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_Current_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).Current(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SA_Current_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).Current(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SA_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SAServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SA_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SAServer).CreateSession(ctx, req.(*SessionLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SA_ServiceDesc is the grpc.ServiceDesc for SA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SA",
	HandlerType: (*SAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SA_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _SA_Logout_Handler,
		},
		{
			MethodName: "ReadSession",
			Handler:    _SA_ReadSession_Handler,
		},
		{
			MethodName: "SearchSessions",
			Handler:    _SA_SearchSessions_Handler,
		},
		{
			MethodName: "Current",
			Handler:    _SA_Current_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _SA_CreateSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
