// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: class.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Classes_ReadClass_FullMethodName     = "/api.Classes/ReadClass"
	Classes_UpdateClass_FullMethodName   = "/api.Classes/UpdateClass"
	Classes_SearchClasses_FullMethodName = "/api.Classes/SearchClasses"
)

// ClassesClient is the client API for Classes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassesClient interface {
	ReadClass(ctx context.Context, in *ReadClassRequest, opts ...grpc.CallOption) (*ReadClassResponse, error)
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error)
	SearchClasses(ctx context.Context, in *SearchClassesRequest, opts ...grpc.CallOption) (*SearchClassesResponse, error)
}

type classesClient struct {
	cc grpc.ClientConnInterface
}

func NewClassesClient(cc grpc.ClientConnInterface) ClassesClient {
	return &classesClient{cc}
}

func (c *classesClient) ReadClass(ctx context.Context, in *ReadClassRequest, opts ...grpc.CallOption) (*ReadClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadClassResponse)
	err := c.cc.Invoke(ctx, Classes_ReadClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesClient) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateClassResponse)
	err := c.cc.Invoke(ctx, Classes_UpdateClass_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classesClient) SearchClasses(ctx context.Context, in *SearchClassesRequest, opts ...grpc.CallOption) (*SearchClassesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchClassesResponse)
	err := c.cc.Invoke(ctx, Classes_SearchClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassesServer is the server API for Classes service.
// All implementations must embed UnimplementedClassesServer
// for forward compatibility.
type ClassesServer interface {
	ReadClass(context.Context, *ReadClassRequest) (*ReadClassResponse, error)
	UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error)
	SearchClasses(context.Context, *SearchClassesRequest) (*SearchClassesResponse, error)
	mustEmbedUnimplementedClassesServer()
}

// UnimplementedClassesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClassesServer struct{}

func (UnimplementedClassesServer) ReadClass(context.Context, *ReadClassRequest) (*ReadClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadClass not implemented")
}
func (UnimplementedClassesServer) UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedClassesServer) SearchClasses(context.Context, *SearchClassesRequest) (*SearchClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchClasses not implemented")
}
func (UnimplementedClassesServer) mustEmbedUnimplementedClassesServer() {}
func (UnimplementedClassesServer) testEmbeddedByValue()                 {}

// UnsafeClassesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassesServer will
// result in compilation errors.
type UnsafeClassesServer interface {
	mustEmbedUnimplementedClassesServer()
}

func RegisterClassesServer(s grpc.ServiceRegistrar, srv ClassesServer) {
	// If the following call pancis, it indicates UnimplementedClassesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Classes_ServiceDesc, srv)
}

func _Classes_ReadClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServer).ReadClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classes_ReadClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServer).ReadClass(ctx, req.(*ReadClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Classes_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classes_UpdateClass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServer).UpdateClass(ctx, req.(*UpdateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Classes_SearchClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassesServer).SearchClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Classes_SearchClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassesServer).SearchClasses(ctx, req.(*SearchClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Classes_ServiceDesc is the grpc.ServiceDesc for Classes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Classes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Classes",
	HandlerType: (*ClassesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadClass",
			Handler:    _Classes_ReadClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _Classes_UpdateClass_Handler,
		},
		{
			MethodName: "SearchClasses",
			Handler:    _Classes_SearchClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "class.proto",
}
