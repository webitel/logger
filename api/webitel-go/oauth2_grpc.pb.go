// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: oauth2.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OAuth2_Authorize_FullMethodName = "/api.OAuth2/Authorize"
	OAuth2_Token_FullMethodName     = "/api.OAuth2/Token"
)

// OAuth2Client is the client API for OAuth2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OAuth 2.0 authorization service
type OAuth2Client interface {
	// The authorization endpoint is used to interact with the resource
	// owner and obtain an authorization grant.
	Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	// The Token endpoint is used by the client to obtain an access token
	// by presenting its authorization grant or refresh token. The token
	// endpoint is used with every authorization grant except for the
	// implicit grant type (since an access token is issued directly).
	Token(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessToken, error)
}

type oAuth2Client struct {
	cc grpc.ClientConnInterface
}

func NewOAuth2Client(cc grpc.ClientConnInterface) OAuth2Client {
	return &oAuth2Client{cc}
}

func (c *oAuth2Client) Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, OAuth2_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2Client) Token(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessToken)
	err := c.cc.Invoke(ctx, OAuth2_Token_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuth2Server is the server API for OAuth2 service.
// All implementations must embed UnimplementedOAuth2Server
// for forward compatibility.
//
// OAuth 2.0 authorization service
type OAuth2Server interface {
	// The authorization endpoint is used to interact with the resource
	// owner and obtain an authorization grant.
	Authorize(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	// The Token endpoint is used by the client to obtain an access token
	// by presenting its authorization grant or refresh token. The token
	// endpoint is used with every authorization grant except for the
	// implicit grant type (since an access token is issued directly).
	Token(context.Context, *AccessTokenRequest) (*AccessToken, error)
	mustEmbedUnimplementedOAuth2Server()
}

// UnimplementedOAuth2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOAuth2Server struct{}

func (UnimplementedOAuth2Server) Authorize(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedOAuth2Server) Token(context.Context, *AccessTokenRequest) (*AccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedOAuth2Server) mustEmbedUnimplementedOAuth2Server() {}
func (UnimplementedOAuth2Server) testEmbeddedByValue()                {}

// UnsafeOAuth2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuth2Server will
// result in compilation errors.
type UnsafeOAuth2Server interface {
	mustEmbedUnimplementedOAuth2Server()
}

func RegisterOAuth2Server(s grpc.ServiceRegistrar, srv OAuth2Server) {
	// If the following call pancis, it indicates UnimplementedOAuth2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OAuth2_ServiceDesc, srv)
}

func _OAuth2_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2Server).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2Server).Authorize(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2Server).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2_Token_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2Server).Token(ctx, req.(*AccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuth2_ServiceDesc is the grpc.ServiceDesc for OAuth2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuth2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.OAuth2",
	HandlerType: (*OAuth2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _OAuth2_Authorize_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _OAuth2_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth2.proto",
}
