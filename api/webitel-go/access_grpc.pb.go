// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: access.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AC_ListAccess_FullMethodName   = "/api.AC/ListAccess"
	AC_GrantAccess_FullMethodName  = "/api.AC/GrantAccess"
	AC_RevokeAccess_FullMethodName = "/api.AC/RevokeAccess"
	AC_UpdateAccess_FullMethodName = "/api.AC/UpdateAccess"
)

// ACClient is the client API for AC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ACClient interface {
	ListAccess(ctx context.Context, in *ListAccessRequest, opts ...grpc.CallOption) (*ListAccessResponse, error)
	GrantAccess(ctx context.Context, in *GrantAccessRequest, opts ...grpc.CallOption) (*GrantAccessResponse, error)
	RevokeAccess(ctx context.Context, in *RevokeAccessRequest, opts ...grpc.CallOption) (*RevokeAccessResponse, error)
	// TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
	UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*UpdateAccessResponse, error)
}

type aCClient struct {
	cc grpc.ClientConnInterface
}

func NewACClient(cc grpc.ClientConnInterface) ACClient {
	return &aCClient{cc}
}

func (c *aCClient) ListAccess(ctx context.Context, in *ListAccessRequest, opts ...grpc.CallOption) (*ListAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessResponse)
	err := c.cc.Invoke(ctx, AC_ListAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCClient) GrantAccess(ctx context.Context, in *GrantAccessRequest, opts ...grpc.CallOption) (*GrantAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantAccessResponse)
	err := c.cc.Invoke(ctx, AC_GrantAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCClient) RevokeAccess(ctx context.Context, in *RevokeAccessRequest, opts ...grpc.CallOption) (*RevokeAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeAccessResponse)
	err := c.cc.Invoke(ctx, AC_RevokeAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aCClient) UpdateAccess(ctx context.Context, in *UpdateAccessRequest, opts ...grpc.CallOption) (*UpdateAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccessResponse)
	err := c.cc.Invoke(ctx, AC_UpdateAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ACServer is the server API for AC service.
// All implementations must embed UnimplementedACServer
// for forward compatibility.
type ACServer interface {
	ListAccess(context.Context, *ListAccessRequest) (*ListAccessResponse, error)
	GrantAccess(context.Context, *GrantAccessRequest) (*GrantAccessResponse, error)
	RevokeAccess(context.Context, *RevokeAccessRequest) (*RevokeAccessResponse, error)
	// TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
	UpdateAccess(context.Context, *UpdateAccessRequest) (*UpdateAccessResponse, error)
	mustEmbedUnimplementedACServer()
}

// UnimplementedACServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedACServer struct{}

func (UnimplementedACServer) ListAccess(context.Context, *ListAccessRequest) (*ListAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccess not implemented")
}
func (UnimplementedACServer) GrantAccess(context.Context, *GrantAccessRequest) (*GrantAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAccess not implemented")
}
func (UnimplementedACServer) RevokeAccess(context.Context, *RevokeAccessRequest) (*RevokeAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccess not implemented")
}
func (UnimplementedACServer) UpdateAccess(context.Context, *UpdateAccessRequest) (*UpdateAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccess not implemented")
}
func (UnimplementedACServer) mustEmbedUnimplementedACServer() {}
func (UnimplementedACServer) testEmbeddedByValue()            {}

// UnsafeACServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ACServer will
// result in compilation errors.
type UnsafeACServer interface {
	mustEmbedUnimplementedACServer()
}

func RegisterACServer(s grpc.ServiceRegistrar, srv ACServer) {
	// If the following call pancis, it indicates UnimplementedACServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AC_ServiceDesc, srv)
}

func _AC_ListAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACServer).ListAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AC_ListAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACServer).ListAccess(ctx, req.(*ListAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AC_GrantAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACServer).GrantAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AC_GrantAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACServer).GrantAccess(ctx, req.(*GrantAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AC_RevokeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACServer).RevokeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AC_RevokeAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACServer).RevokeAccess(ctx, req.(*RevokeAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AC_UpdateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ACServer).UpdateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AC_UpdateAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ACServer).UpdateAccess(ctx, req.(*UpdateAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AC_ServiceDesc is the grpc.ServiceDesc for AC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AC",
	HandlerType: (*ACServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccess",
			Handler:    _AC_ListAccess_Handler,
		},
		{
			MethodName: "GrantAccess",
			Handler:    _AC_GrantAccess_Handler,
		},
		{
			MethodName: "RevokeAccess",
			Handler:    _AC_RevokeAccess_Handler,
		},
		{
			MethodName: "UpdateAccess",
			Handler:    _AC_UpdateAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access.proto",
}
