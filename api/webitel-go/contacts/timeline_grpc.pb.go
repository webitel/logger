// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: contacts/timeline.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Timeline_GetTimeline_FullMethodName        = "/webitel.contacts.Timeline/GetTimeline"
	Timeline_GetTimelineCounter_FullMethodName = "/webitel.contacts.Timeline/GetTimelineCounter"
)

// TimelineClient is the client API for Timeline service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimelineClient interface {
	GetTimeline(ctx context.Context, in *GetTimelineRequest, opts ...grpc.CallOption) (*GetTimelineResponse, error)
	GetTimelineCounter(ctx context.Context, in *GetTimelineCounterRequest, opts ...grpc.CallOption) (*GetTimelineCounterResponse, error)
}

type timelineClient struct {
	cc grpc.ClientConnInterface
}

func NewTimelineClient(cc grpc.ClientConnInterface) TimelineClient {
	return &timelineClient{cc}
}

func (c *timelineClient) GetTimeline(ctx context.Context, in *GetTimelineRequest, opts ...grpc.CallOption) (*GetTimelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimelineResponse)
	err := c.cc.Invoke(ctx, Timeline_GetTimeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timelineClient) GetTimelineCounter(ctx context.Context, in *GetTimelineCounterRequest, opts ...grpc.CallOption) (*GetTimelineCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimelineCounterResponse)
	err := c.cc.Invoke(ctx, Timeline_GetTimelineCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimelineServer is the server API for Timeline service.
// All implementations must embed UnimplementedTimelineServer
// for forward compatibility.
type TimelineServer interface {
	GetTimeline(context.Context, *GetTimelineRequest) (*GetTimelineResponse, error)
	GetTimelineCounter(context.Context, *GetTimelineCounterRequest) (*GetTimelineCounterResponse, error)
	mustEmbedUnimplementedTimelineServer()
}

// UnimplementedTimelineServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimelineServer struct{}

func (UnimplementedTimelineServer) GetTimeline(context.Context, *GetTimelineRequest) (*GetTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeline not implemented")
}
func (UnimplementedTimelineServer) GetTimelineCounter(context.Context, *GetTimelineCounterRequest) (*GetTimelineCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimelineCounter not implemented")
}
func (UnimplementedTimelineServer) mustEmbedUnimplementedTimelineServer() {}
func (UnimplementedTimelineServer) testEmbeddedByValue()                  {}

// UnsafeTimelineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimelineServer will
// result in compilation errors.
type UnsafeTimelineServer interface {
	mustEmbedUnimplementedTimelineServer()
}

func RegisterTimelineServer(s grpc.ServiceRegistrar, srv TimelineServer) {
	// If the following call pancis, it indicates UnimplementedTimelineServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Timeline_ServiceDesc, srv)
}

func _Timeline_GetTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).GetTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timeline_GetTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).GetTimeline(ctx, req.(*GetTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timeline_GetTimelineCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimelineCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimelineServer).GetTimelineCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timeline_GetTimelineCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimelineServer).GetTimelineCounter(ctx, req.(*GetTimelineCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timeline_ServiceDesc is the grpc.ServiceDesc for Timeline service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timeline_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Timeline",
	HandlerType: (*TimelineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeline",
			Handler:    _Timeline_GetTimeline_Handler,
		},
		{
			MethodName: "GetTimelineCounter",
			Handler:    _Timeline_GetTimelineCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/timeline.proto",
}
