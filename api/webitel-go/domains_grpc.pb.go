// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: domains.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Domains_ReadDomain_FullMethodName    = "/api.Domains/ReadDomain"
	Domains_UpdateDomain_FullMethodName  = "/api.Domains/UpdateDomain"
	Domains_DeleteDomain_FullMethodName  = "/api.Domains/DeleteDomain"
	Domains_CreateDomain_FullMethodName  = "/api.Domains/CreateDomain"
	Domains_SearchDomains_FullMethodName = "/api.Domains/SearchDomains"
)

// DomainsClient is the client API for Domains service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainsClient interface {
	ReadDomain(ctx context.Context, in *ReadDomainRequest, opts ...grpc.CallOption) (*ReadDomainResponse, error)
	UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error)
	DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*DeleteDomainResponse, error)
	CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error)
	SearchDomains(ctx context.Context, in *SearchDomainsRequest, opts ...grpc.CallOption) (*SearchDomainsResponse, error)
}

type domainsClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainsClient(cc grpc.ClientConnInterface) DomainsClient {
	return &domainsClient{cc}
}

func (c *domainsClient) ReadDomain(ctx context.Context, in *ReadDomainRequest, opts ...grpc.CallOption) (*ReadDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadDomainResponse)
	err := c.cc.Invoke(ctx, Domains_ReadDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) UpdateDomain(ctx context.Context, in *UpdateDomainRequest, opts ...grpc.CallOption) (*UpdateDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDomainResponse)
	err := c.cc.Invoke(ctx, Domains_UpdateDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) DeleteDomain(ctx context.Context, in *DeleteDomainRequest, opts ...grpc.CallOption) (*DeleteDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDomainResponse)
	err := c.cc.Invoke(ctx, Domains_DeleteDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) CreateDomain(ctx context.Context, in *CreateDomainRequest, opts ...grpc.CallOption) (*CreateDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDomainResponse)
	err := c.cc.Invoke(ctx, Domains_CreateDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) SearchDomains(ctx context.Context, in *SearchDomainsRequest, opts ...grpc.CallOption) (*SearchDomainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchDomainsResponse)
	err := c.cc.Invoke(ctx, Domains_SearchDomains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainsServer is the server API for Domains service.
// All implementations must embed UnimplementedDomainsServer
// for forward compatibility.
type DomainsServer interface {
	ReadDomain(context.Context, *ReadDomainRequest) (*ReadDomainResponse, error)
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error)
	CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error)
	SearchDomains(context.Context, *SearchDomainsRequest) (*SearchDomainsResponse, error)
	mustEmbedUnimplementedDomainsServer()
}

// UnimplementedDomainsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDomainsServer struct{}

func (UnimplementedDomainsServer) ReadDomain(context.Context, *ReadDomainRequest) (*ReadDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDomain not implemented")
}
func (UnimplementedDomainsServer) UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDomain not implemented")
}
func (UnimplementedDomainsServer) DeleteDomain(context.Context, *DeleteDomainRequest) (*DeleteDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDomain not implemented")
}
func (UnimplementedDomainsServer) CreateDomain(context.Context, *CreateDomainRequest) (*CreateDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDomain not implemented")
}
func (UnimplementedDomainsServer) SearchDomains(context.Context, *SearchDomainsRequest) (*SearchDomainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDomains not implemented")
}
func (UnimplementedDomainsServer) mustEmbedUnimplementedDomainsServer() {}
func (UnimplementedDomainsServer) testEmbeddedByValue()                 {}

// UnsafeDomainsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainsServer will
// result in compilation errors.
type UnsafeDomainsServer interface {
	mustEmbedUnimplementedDomainsServer()
}

func RegisterDomainsServer(s grpc.ServiceRegistrar, srv DomainsServer) {
	// If the following call pancis, it indicates UnimplementedDomainsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Domains_ServiceDesc, srv)
}

func _Domains_ReadDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).ReadDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domains_ReadDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).ReadDomain(ctx, req.(*ReadDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_UpdateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).UpdateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domains_UpdateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).UpdateDomain(ctx, req.(*UpdateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_DeleteDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).DeleteDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domains_DeleteDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).DeleteDomain(ctx, req.(*DeleteDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domains_CreateDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).CreateDomain(ctx, req.(*CreateDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_SearchDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).SearchDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Domains_SearchDomains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).SearchDomains(ctx, req.(*SearchDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Domains_ServiceDesc is the grpc.ServiceDesc for Domains service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Domains_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Domains",
	HandlerType: (*DomainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadDomain",
			Handler:    _Domains_ReadDomain_Handler,
		},
		{
			MethodName: "UpdateDomain",
			Handler:    _Domains_UpdateDomain_Handler,
		},
		{
			MethodName: "DeleteDomain",
			Handler:    _Domains_DeleteDomain_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _Domains_CreateDomain_Handler,
		},
		{
			MethodName: "SearchDomains",
			Handler:    _Domains_SearchDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domains.proto",
}
