// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: presence.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Presence_SetStatus_FullMethodName = "/api.Presence/SetStatus"
)

// PresenceClient is the client API for Presence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresenceClient interface {
	// set(presence) (notify, error)
	SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*PresenceStatus, error)
}

type presenceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresenceClient(cc grpc.ClientConnInterface) PresenceClient {
	return &presenceClient{cc}
}

func (c *presenceClient) SetStatus(ctx context.Context, in *SetStatusRequest, opts ...grpc.CallOption) (*PresenceStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresenceStatus)
	err := c.cc.Invoke(ctx, Presence_SetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresenceServer is the server API for Presence service.
// All implementations must embed UnimplementedPresenceServer
// for forward compatibility.
type PresenceServer interface {
	// set(presence) (notify, error)
	SetStatus(context.Context, *SetStatusRequest) (*PresenceStatus, error)
	mustEmbedUnimplementedPresenceServer()
}

// UnimplementedPresenceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPresenceServer struct{}

func (UnimplementedPresenceServer) SetStatus(context.Context, *SetStatusRequest) (*PresenceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedPresenceServer) mustEmbedUnimplementedPresenceServer() {}
func (UnimplementedPresenceServer) testEmbeddedByValue()                  {}

// UnsafePresenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresenceServer will
// result in compilation errors.
type UnsafePresenceServer interface {
	mustEmbedUnimplementedPresenceServer()
}

func RegisterPresenceServer(s grpc.ServiceRegistrar, srv PresenceServer) {
	// If the following call pancis, it indicates UnimplementedPresenceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Presence_ServiceDesc, srv)
}

func _Presence_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresenceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presence_SetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresenceServer).SetStatus(ctx, req.(*SetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Presence_ServiceDesc is the grpc.ServiceDesc for Presence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Presence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Presence",
	HandlerType: (*PresenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _Presence_SetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presence.proto",
}
