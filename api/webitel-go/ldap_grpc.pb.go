// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: ldap.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LDAP_CreateLDAPCatalog_FullMethodName  = "/api.LDAP/CreateLDAPCatalog"
	LDAP_UpdateLDAPCatalog_FullMethodName  = "/api.LDAP/UpdateLDAPCatalog"
	LDAP_DeleteLDAPCatalog_FullMethodName  = "/api.LDAP/DeleteLDAPCatalog"
	LDAP_SearchLDAPCatalog_FullMethodName  = "/api.LDAP/SearchLDAPCatalog"
	LDAP_LocateLDAPCatalog_FullMethodName  = "/api.LDAP/LocateLDAPCatalog"
	LDAP_LDAPSearch_FullMethodName         = "/api.LDAP/LDAPSearch"
	LDAP_SearchLDAPTemplate_FullMethodName = "/api.LDAP/SearchLDAPTemplate"
	LDAP_LocateLDAPTemplate_FullMethodName = "/api.LDAP/LocateLDAPTemplate"
	LDAP_CreateLDAPTemplate_FullMethodName = "/api.LDAP/CreateLDAPTemplate"
	LDAP_UpdateLDAPTemplate_FullMethodName = "/api.LDAP/UpdateLDAPTemplate"
	LDAP_DeleteLDAPTemplate_FullMethodName = "/api.LDAP/DeleteLDAPTemplate"
	LDAP_ResyncLDAPCatalog_FullMethodName  = "/api.LDAP/ResyncLDAPCatalog"
	LDAP_SearchLDAProcess_FullMethodName   = "/api.LDAP/SearchLDAProcess"
	LDAP_LocateLDAProcess_FullMethodName   = "/api.LDAP/LocateLDAProcess"
)

// LDAPClient is the client API for LDAP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LDAP repository
type LDAPClient interface {
	// Create LDAP profile
	CreateLDAPCatalog(ctx context.Context, in *LDAPCatalog, opts ...grpc.CallOption) (*LDAPCatalog, error)
	// Update LDAP profile details
	UpdateLDAPCatalog(ctx context.Context, in *UpdateLDAPRequest, opts ...grpc.CallOption) (*LDAPCatalog, error)
	// Delete LDAP profile(s) ...
	DeleteLDAPCatalog(ctx context.Context, in *DeleteLDAPRequest, opts ...grpc.CallOption) (*LDAPCatalog, error)
	// Search for LDAP directories ...
	SearchLDAPCatalog(ctx context.Context, in *SearchLDAPRequest, opts ...grpc.CallOption) (*SearchLDAPResponse, error)
	// Read LDAP catalog profile by .id
	LocateLDAPCatalog(ctx context.Context, in *SearchLDAPRequest, opts ...grpc.CallOption) (*LDAPCatalog, error)
	// LDAPSearch performs LDAP Search operation ...
	LDAPSearch(ctx context.Context, in *LDAPSearchRequest, opts ...grpc.CallOption) (*LDAPSearchResponse, error)
	SearchLDAPTemplate(ctx context.Context, in *LDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplateResponse, error)
	LocateLDAPTemplate(ctx context.Context, in *LDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplate, error)
	CreateLDAPTemplate(ctx context.Context, in *LDAPTemplate, opts ...grpc.CallOption) (*LDAPTemplate, error)
	UpdateLDAPTemplate(ctx context.Context, in *UpdateLDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplate, error)
	DeleteLDAPTemplate(ctx context.Context, in *LDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplateResponse, error)
	// Resync LDAP directory catalog changes ...
	ResyncLDAPCatalog(ctx context.Context, in *LDAProcessExecute, opts ...grpc.CallOption) (*LDAProcess, error)
	SearchLDAProcess(ctx context.Context, in *LDAProcessRequest, opts ...grpc.CallOption) (*LDAProcessResponse, error)
	LocateLDAProcess(ctx context.Context, in *LDAProcessRequest, opts ...grpc.CallOption) (*LDAProcess, error)
}

type lDAPClient struct {
	cc grpc.ClientConnInterface
}

func NewLDAPClient(cc grpc.ClientConnInterface) LDAPClient {
	return &lDAPClient{cc}
}

func (c *lDAPClient) CreateLDAPCatalog(ctx context.Context, in *LDAPCatalog, opts ...grpc.CallOption) (*LDAPCatalog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPCatalog)
	err := c.cc.Invoke(ctx, LDAP_CreateLDAPCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) UpdateLDAPCatalog(ctx context.Context, in *UpdateLDAPRequest, opts ...grpc.CallOption) (*LDAPCatalog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPCatalog)
	err := c.cc.Invoke(ctx, LDAP_UpdateLDAPCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) DeleteLDAPCatalog(ctx context.Context, in *DeleteLDAPRequest, opts ...grpc.CallOption) (*LDAPCatalog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPCatalog)
	err := c.cc.Invoke(ctx, LDAP_DeleteLDAPCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) SearchLDAPCatalog(ctx context.Context, in *SearchLDAPRequest, opts ...grpc.CallOption) (*SearchLDAPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchLDAPResponse)
	err := c.cc.Invoke(ctx, LDAP_SearchLDAPCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) LocateLDAPCatalog(ctx context.Context, in *SearchLDAPRequest, opts ...grpc.CallOption) (*LDAPCatalog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPCatalog)
	err := c.cc.Invoke(ctx, LDAP_LocateLDAPCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) LDAPSearch(ctx context.Context, in *LDAPSearchRequest, opts ...grpc.CallOption) (*LDAPSearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPSearchResponse)
	err := c.cc.Invoke(ctx, LDAP_LDAPSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) SearchLDAPTemplate(ctx context.Context, in *LDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPTemplateResponse)
	err := c.cc.Invoke(ctx, LDAP_SearchLDAPTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) LocateLDAPTemplate(ctx context.Context, in *LDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPTemplate)
	err := c.cc.Invoke(ctx, LDAP_LocateLDAPTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) CreateLDAPTemplate(ctx context.Context, in *LDAPTemplate, opts ...grpc.CallOption) (*LDAPTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPTemplate)
	err := c.cc.Invoke(ctx, LDAP_CreateLDAPTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) UpdateLDAPTemplate(ctx context.Context, in *UpdateLDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPTemplate)
	err := c.cc.Invoke(ctx, LDAP_UpdateLDAPTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) DeleteLDAPTemplate(ctx context.Context, in *LDAPTemplateRequest, opts ...grpc.CallOption) (*LDAPTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAPTemplateResponse)
	err := c.cc.Invoke(ctx, LDAP_DeleteLDAPTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) ResyncLDAPCatalog(ctx context.Context, in *LDAProcessExecute, opts ...grpc.CallOption) (*LDAProcess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAProcess)
	err := c.cc.Invoke(ctx, LDAP_ResyncLDAPCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) SearchLDAProcess(ctx context.Context, in *LDAProcessRequest, opts ...grpc.CallOption) (*LDAProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAProcessResponse)
	err := c.cc.Invoke(ctx, LDAP_SearchLDAProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lDAPClient) LocateLDAProcess(ctx context.Context, in *LDAProcessRequest, opts ...grpc.CallOption) (*LDAProcess, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LDAProcess)
	err := c.cc.Invoke(ctx, LDAP_LocateLDAProcess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LDAPServer is the server API for LDAP service.
// All implementations must embed UnimplementedLDAPServer
// for forward compatibility.
//
// LDAP repository
type LDAPServer interface {
	// Create LDAP profile
	CreateLDAPCatalog(context.Context, *LDAPCatalog) (*LDAPCatalog, error)
	// Update LDAP profile details
	UpdateLDAPCatalog(context.Context, *UpdateLDAPRequest) (*LDAPCatalog, error)
	// Delete LDAP profile(s) ...
	DeleteLDAPCatalog(context.Context, *DeleteLDAPRequest) (*LDAPCatalog, error)
	// Search for LDAP directories ...
	SearchLDAPCatalog(context.Context, *SearchLDAPRequest) (*SearchLDAPResponse, error)
	// Read LDAP catalog profile by .id
	LocateLDAPCatalog(context.Context, *SearchLDAPRequest) (*LDAPCatalog, error)
	// LDAPSearch performs LDAP Search operation ...
	LDAPSearch(context.Context, *LDAPSearchRequest) (*LDAPSearchResponse, error)
	SearchLDAPTemplate(context.Context, *LDAPTemplateRequest) (*LDAPTemplateResponse, error)
	LocateLDAPTemplate(context.Context, *LDAPTemplateRequest) (*LDAPTemplate, error)
	CreateLDAPTemplate(context.Context, *LDAPTemplate) (*LDAPTemplate, error)
	UpdateLDAPTemplate(context.Context, *UpdateLDAPTemplateRequest) (*LDAPTemplate, error)
	DeleteLDAPTemplate(context.Context, *LDAPTemplateRequest) (*LDAPTemplateResponse, error)
	// Resync LDAP directory catalog changes ...
	ResyncLDAPCatalog(context.Context, *LDAProcessExecute) (*LDAProcess, error)
	SearchLDAProcess(context.Context, *LDAProcessRequest) (*LDAProcessResponse, error)
	LocateLDAProcess(context.Context, *LDAProcessRequest) (*LDAProcess, error)
	mustEmbedUnimplementedLDAPServer()
}

// UnimplementedLDAPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLDAPServer struct{}

func (UnimplementedLDAPServer) CreateLDAPCatalog(context.Context, *LDAPCatalog) (*LDAPCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLDAPCatalog not implemented")
}
func (UnimplementedLDAPServer) UpdateLDAPCatalog(context.Context, *UpdateLDAPRequest) (*LDAPCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLDAPCatalog not implemented")
}
func (UnimplementedLDAPServer) DeleteLDAPCatalog(context.Context, *DeleteLDAPRequest) (*LDAPCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLDAPCatalog not implemented")
}
func (UnimplementedLDAPServer) SearchLDAPCatalog(context.Context, *SearchLDAPRequest) (*SearchLDAPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLDAPCatalog not implemented")
}
func (UnimplementedLDAPServer) LocateLDAPCatalog(context.Context, *SearchLDAPRequest) (*LDAPCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateLDAPCatalog not implemented")
}
func (UnimplementedLDAPServer) LDAPSearch(context.Context, *LDAPSearchRequest) (*LDAPSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LDAPSearch not implemented")
}
func (UnimplementedLDAPServer) SearchLDAPTemplate(context.Context, *LDAPTemplateRequest) (*LDAPTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLDAPTemplate not implemented")
}
func (UnimplementedLDAPServer) LocateLDAPTemplate(context.Context, *LDAPTemplateRequest) (*LDAPTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateLDAPTemplate not implemented")
}
func (UnimplementedLDAPServer) CreateLDAPTemplate(context.Context, *LDAPTemplate) (*LDAPTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLDAPTemplate not implemented")
}
func (UnimplementedLDAPServer) UpdateLDAPTemplate(context.Context, *UpdateLDAPTemplateRequest) (*LDAPTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLDAPTemplate not implemented")
}
func (UnimplementedLDAPServer) DeleteLDAPTemplate(context.Context, *LDAPTemplateRequest) (*LDAPTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLDAPTemplate not implemented")
}
func (UnimplementedLDAPServer) ResyncLDAPCatalog(context.Context, *LDAProcessExecute) (*LDAProcess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncLDAPCatalog not implemented")
}
func (UnimplementedLDAPServer) SearchLDAProcess(context.Context, *LDAProcessRequest) (*LDAProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchLDAProcess not implemented")
}
func (UnimplementedLDAPServer) LocateLDAProcess(context.Context, *LDAProcessRequest) (*LDAProcess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateLDAProcess not implemented")
}
func (UnimplementedLDAPServer) mustEmbedUnimplementedLDAPServer() {}
func (UnimplementedLDAPServer) testEmbeddedByValue()              {}

// UnsafeLDAPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LDAPServer will
// result in compilation errors.
type UnsafeLDAPServer interface {
	mustEmbedUnimplementedLDAPServer()
}

func RegisterLDAPServer(s grpc.ServiceRegistrar, srv LDAPServer) {
	// If the following call pancis, it indicates UnimplementedLDAPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LDAP_ServiceDesc, srv)
}

func _LDAP_CreateLDAPCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAPCatalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).CreateLDAPCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_CreateLDAPCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).CreateLDAPCatalog(ctx, req.(*LDAPCatalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_UpdateLDAPCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLDAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).UpdateLDAPCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_UpdateLDAPCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).UpdateLDAPCatalog(ctx, req.(*UpdateLDAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_DeleteLDAPCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLDAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).DeleteLDAPCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_DeleteLDAPCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).DeleteLDAPCatalog(ctx, req.(*DeleteLDAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_SearchLDAPCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLDAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).SearchLDAPCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_SearchLDAPCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).SearchLDAPCatalog(ctx, req.(*SearchLDAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_LocateLDAPCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchLDAPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).LocateLDAPCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_LocateLDAPCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).LocateLDAPCatalog(ctx, req.(*SearchLDAPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_LDAPSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAPSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).LDAPSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_LDAPSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).LDAPSearch(ctx, req.(*LDAPSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_SearchLDAPTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAPTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).SearchLDAPTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_SearchLDAPTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).SearchLDAPTemplate(ctx, req.(*LDAPTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_LocateLDAPTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAPTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).LocateLDAPTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_LocateLDAPTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).LocateLDAPTemplate(ctx, req.(*LDAPTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_CreateLDAPTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAPTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).CreateLDAPTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_CreateLDAPTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).CreateLDAPTemplate(ctx, req.(*LDAPTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_UpdateLDAPTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLDAPTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).UpdateLDAPTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_UpdateLDAPTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).UpdateLDAPTemplate(ctx, req.(*UpdateLDAPTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_DeleteLDAPTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAPTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).DeleteLDAPTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_DeleteLDAPTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).DeleteLDAPTemplate(ctx, req.(*LDAPTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_ResyncLDAPCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAProcessExecute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).ResyncLDAPCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_ResyncLDAPCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).ResyncLDAPCatalog(ctx, req.(*LDAProcessExecute))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_SearchLDAProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).SearchLDAProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_SearchLDAProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).SearchLDAProcess(ctx, req.(*LDAProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LDAP_LocateLDAProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LDAProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LDAPServer).LocateLDAProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LDAP_LocateLDAProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LDAPServer).LocateLDAProcess(ctx, req.(*LDAProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LDAP_ServiceDesc is the grpc.ServiceDesc for LDAP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LDAP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LDAP",
	HandlerType: (*LDAPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLDAPCatalog",
			Handler:    _LDAP_CreateLDAPCatalog_Handler,
		},
		{
			MethodName: "UpdateLDAPCatalog",
			Handler:    _LDAP_UpdateLDAPCatalog_Handler,
		},
		{
			MethodName: "DeleteLDAPCatalog",
			Handler:    _LDAP_DeleteLDAPCatalog_Handler,
		},
		{
			MethodName: "SearchLDAPCatalog",
			Handler:    _LDAP_SearchLDAPCatalog_Handler,
		},
		{
			MethodName: "LocateLDAPCatalog",
			Handler:    _LDAP_LocateLDAPCatalog_Handler,
		},
		{
			MethodName: "LDAPSearch",
			Handler:    _LDAP_LDAPSearch_Handler,
		},
		{
			MethodName: "SearchLDAPTemplate",
			Handler:    _LDAP_SearchLDAPTemplate_Handler,
		},
		{
			MethodName: "LocateLDAPTemplate",
			Handler:    _LDAP_LocateLDAPTemplate_Handler,
		},
		{
			MethodName: "CreateLDAPTemplate",
			Handler:    _LDAP_CreateLDAPTemplate_Handler,
		},
		{
			MethodName: "UpdateLDAPTemplate",
			Handler:    _LDAP_UpdateLDAPTemplate_Handler,
		},
		{
			MethodName: "DeleteLDAPTemplate",
			Handler:    _LDAP_DeleteLDAPTemplate_Handler,
		},
		{
			MethodName: "ResyncLDAPCatalog",
			Handler:    _LDAP_ResyncLDAPCatalog_Handler,
		},
		{
			MethodName: "SearchLDAProcess",
			Handler:    _LDAP_SearchLDAProcess_Handler,
		},
		{
			MethodName: "LocateLDAProcess",
			Handler:    _LDAP_LocateLDAProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ldap.proto",
}
