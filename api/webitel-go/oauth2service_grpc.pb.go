// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: oauth2service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OAuth2Federation_SearchOAuthService_FullMethodName = "/api.OAuth2Federation/SearchOAuthService"
	OAuth2Federation_CreateOAuthService_FullMethodName = "/api.OAuth2Federation/CreateOAuthService"
	OAuth2Federation_LocateOAuthService_FullMethodName = "/api.OAuth2Federation/LocateOAuthService"
	OAuth2Federation_UpdateOAuthService_FullMethodName = "/api.OAuth2Federation/UpdateOAuthService"
	OAuth2Federation_DeleteOAuthService_FullMethodName = "/api.OAuth2Federation/DeleteOAuthService"
)

// OAuth2FederationClient is the client API for OAuth2Federation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OAuth 2.0 service federation
type OAuth2FederationClient interface {
	SearchOAuthService(ctx context.Context, in *SearchOAuthServiceRequest, opts ...grpc.CallOption) (*SearchOAuthServiceResponse, error)
	CreateOAuthService(ctx context.Context, in *OAuthService, opts ...grpc.CallOption) (*OAuthService, error)
	LocateOAuthService(ctx context.Context, in *SearchOAuthServiceRequest, opts ...grpc.CallOption) (*OAuthService, error)
	UpdateOAuthService(ctx context.Context, in *UpdateOAuthServiceRequest, opts ...grpc.CallOption) (*OAuthService, error)
	DeleteOAuthService(ctx context.Context, in *DeleteOAuthServiceRequest, opts ...grpc.CallOption) (*DeleteOAuthServiceResponse, error)
}

type oAuth2FederationClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuth2FederationClient(cc grpc.ClientConnInterface) OAuth2FederationClient {
	return &oAuth2FederationClient{cc}
}

func (c *oAuth2FederationClient) SearchOAuthService(ctx context.Context, in *SearchOAuthServiceRequest, opts ...grpc.CallOption) (*SearchOAuthServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchOAuthServiceResponse)
	err := c.cc.Invoke(ctx, OAuth2Federation_SearchOAuthService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2FederationClient) CreateOAuthService(ctx context.Context, in *OAuthService, opts ...grpc.CallOption) (*OAuthService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthService)
	err := c.cc.Invoke(ctx, OAuth2Federation_CreateOAuthService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2FederationClient) LocateOAuthService(ctx context.Context, in *SearchOAuthServiceRequest, opts ...grpc.CallOption) (*OAuthService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthService)
	err := c.cc.Invoke(ctx, OAuth2Federation_LocateOAuthService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2FederationClient) UpdateOAuthService(ctx context.Context, in *UpdateOAuthServiceRequest, opts ...grpc.CallOption) (*OAuthService, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthService)
	err := c.cc.Invoke(ctx, OAuth2Federation_UpdateOAuthService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuth2FederationClient) DeleteOAuthService(ctx context.Context, in *DeleteOAuthServiceRequest, opts ...grpc.CallOption) (*DeleteOAuthServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOAuthServiceResponse)
	err := c.cc.Invoke(ctx, OAuth2Federation_DeleteOAuthService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuth2FederationServer is the server API for OAuth2Federation service.
// All implementations must embed UnimplementedOAuth2FederationServer
// for forward compatibility.
//
// OAuth 2.0 service federation
type OAuth2FederationServer interface {
	SearchOAuthService(context.Context, *SearchOAuthServiceRequest) (*SearchOAuthServiceResponse, error)
	CreateOAuthService(context.Context, *OAuthService) (*OAuthService, error)
	LocateOAuthService(context.Context, *SearchOAuthServiceRequest) (*OAuthService, error)
	UpdateOAuthService(context.Context, *UpdateOAuthServiceRequest) (*OAuthService, error)
	DeleteOAuthService(context.Context, *DeleteOAuthServiceRequest) (*DeleteOAuthServiceResponse, error)
	mustEmbedUnimplementedOAuth2FederationServer()
}

// UnimplementedOAuth2FederationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOAuth2FederationServer struct{}

func (UnimplementedOAuth2FederationServer) SearchOAuthService(context.Context, *SearchOAuthServiceRequest) (*SearchOAuthServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOAuthService not implemented")
}
func (UnimplementedOAuth2FederationServer) CreateOAuthService(context.Context, *OAuthService) (*OAuthService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuthService not implemented")
}
func (UnimplementedOAuth2FederationServer) LocateOAuthService(context.Context, *SearchOAuthServiceRequest) (*OAuthService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateOAuthService not implemented")
}
func (UnimplementedOAuth2FederationServer) UpdateOAuthService(context.Context, *UpdateOAuthServiceRequest) (*OAuthService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuthService not implemented")
}
func (UnimplementedOAuth2FederationServer) DeleteOAuthService(context.Context, *DeleteOAuthServiceRequest) (*DeleteOAuthServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuthService not implemented")
}
func (UnimplementedOAuth2FederationServer) mustEmbedUnimplementedOAuth2FederationServer() {}
func (UnimplementedOAuth2FederationServer) testEmbeddedByValue()                          {}

// UnsafeOAuth2FederationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuth2FederationServer will
// result in compilation errors.
type UnsafeOAuth2FederationServer interface {
	mustEmbedUnimplementedOAuth2FederationServer()
}

func RegisterOAuth2FederationServer(s grpc.ServiceRegistrar, srv OAuth2FederationServer) {
	// If the following call pancis, it indicates UnimplementedOAuth2FederationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OAuth2Federation_ServiceDesc, srv)
}

func _OAuth2Federation_SearchOAuthService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOAuthServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2FederationServer).SearchOAuthService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2Federation_SearchOAuthService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2FederationServer).SearchOAuthService(ctx, req.(*SearchOAuthServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Federation_CreateOAuthService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2FederationServer).CreateOAuthService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2Federation_CreateOAuthService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2FederationServer).CreateOAuthService(ctx, req.(*OAuthService))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Federation_LocateOAuthService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOAuthServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2FederationServer).LocateOAuthService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2Federation_LocateOAuthService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2FederationServer).LocateOAuthService(ctx, req.(*SearchOAuthServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Federation_UpdateOAuthService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuthServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2FederationServer).UpdateOAuthService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2Federation_UpdateOAuthService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2FederationServer).UpdateOAuthService(ctx, req.(*UpdateOAuthServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuth2Federation_DeleteOAuthService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuthServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuth2FederationServer).DeleteOAuthService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OAuth2Federation_DeleteOAuthService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuth2FederationServer).DeleteOAuthService(ctx, req.(*DeleteOAuthServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuth2Federation_ServiceDesc is the grpc.ServiceDesc for OAuth2Federation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuth2Federation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.OAuth2Federation",
	HandlerType: (*OAuth2FederationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchOAuthService",
			Handler:    _OAuth2Federation_SearchOAuthService_Handler,
		},
		{
			MethodName: "CreateOAuthService",
			Handler:    _OAuth2Federation_CreateOAuthService_Handler,
		},
		{
			MethodName: "LocateOAuthService",
			Handler:    _OAuth2Federation_LocateOAuthService_Handler,
		},
		{
			MethodName: "UpdateOAuthService",
			Handler:    _OAuth2Federation_UpdateOAuthService_Handler,
		},
		{
			MethodName: "DeleteOAuthService",
			Handler:    _OAuth2Federation_DeleteOAuthService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth2service.proto",
}
