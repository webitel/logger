// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: user_access_token.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserAccessTokens_GetUserAccessToken_FullMethodName    = "/api.UserAccessTokens/GetUserAccessToken"
	UserAccessTokens_AddUserAccessToken_FullMethodName    = "/api.UserAccessTokens/AddUserAccessToken"
	UserAccessTokens_ListUserAccessToken_FullMethodName   = "/api.UserAccessTokens/ListUserAccessToken"
	UserAccessTokens_UpdateUserAccessToken_FullMethodName = "/api.UserAccessTokens/UpdateUserAccessToken"
	UserAccessTokens_DeleteUserAccessToken_FullMethodName = "/api.UserAccessTokens/DeleteUserAccessToken"
)

// UserAccessTokensClient is the client API for UserAccessTokens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccessTokensClient interface {
	GetUserAccessToken(ctx context.Context, in *UserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error)
	AddUserAccessToken(ctx context.Context, in *AddUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error)
	ListUserAccessToken(ctx context.Context, in *ListUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessTokenList, error)
	UpdateUserAccessToken(ctx context.Context, in *UpdateUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error)
	DeleteUserAccessToken(ctx context.Context, in *DeleteUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error)
}

type userAccessTokensClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccessTokensClient(cc grpc.ClientConnInterface) UserAccessTokensClient {
	return &userAccessTokensClient{cc}
}

func (c *userAccessTokensClient) GetUserAccessToken(ctx context.Context, in *UserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccessToken)
	err := c.cc.Invoke(ctx, UserAccessTokens_GetUserAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessTokensClient) AddUserAccessToken(ctx context.Context, in *AddUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccessToken)
	err := c.cc.Invoke(ctx, UserAccessTokens_AddUserAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessTokensClient) ListUserAccessToken(ctx context.Context, in *ListUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessTokenList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccessTokenList)
	err := c.cc.Invoke(ctx, UserAccessTokens_ListUserAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessTokensClient) UpdateUserAccessToken(ctx context.Context, in *UpdateUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccessToken)
	err := c.cc.Invoke(ctx, UserAccessTokens_UpdateUserAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccessTokensClient) DeleteUserAccessToken(ctx context.Context, in *DeleteUserAccessTokenRequest, opts ...grpc.CallOption) (*UserAccessToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAccessToken)
	err := c.cc.Invoke(ctx, UserAccessTokens_DeleteUserAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccessTokensServer is the server API for UserAccessTokens service.
// All implementations must embed UnimplementedUserAccessTokensServer
// for forward compatibility.
type UserAccessTokensServer interface {
	GetUserAccessToken(context.Context, *UserAccessTokenRequest) (*UserAccessToken, error)
	AddUserAccessToken(context.Context, *AddUserAccessTokenRequest) (*UserAccessToken, error)
	ListUserAccessToken(context.Context, *ListUserAccessTokenRequest) (*UserAccessTokenList, error)
	UpdateUserAccessToken(context.Context, *UpdateUserAccessTokenRequest) (*UserAccessToken, error)
	DeleteUserAccessToken(context.Context, *DeleteUserAccessTokenRequest) (*UserAccessToken, error)
	mustEmbedUnimplementedUserAccessTokensServer()
}

// UnimplementedUserAccessTokensServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserAccessTokensServer struct{}

func (UnimplementedUserAccessTokensServer) GetUserAccessToken(context.Context, *UserAccessTokenRequest) (*UserAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccessToken not implemented")
}
func (UnimplementedUserAccessTokensServer) AddUserAccessToken(context.Context, *AddUserAccessTokenRequest) (*UserAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAccessToken not implemented")
}
func (UnimplementedUserAccessTokensServer) ListUserAccessToken(context.Context, *ListUserAccessTokenRequest) (*UserAccessTokenList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAccessToken not implemented")
}
func (UnimplementedUserAccessTokensServer) UpdateUserAccessToken(context.Context, *UpdateUserAccessTokenRequest) (*UserAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAccessToken not implemented")
}
func (UnimplementedUserAccessTokensServer) DeleteUserAccessToken(context.Context, *DeleteUserAccessTokenRequest) (*UserAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserAccessToken not implemented")
}
func (UnimplementedUserAccessTokensServer) mustEmbedUnimplementedUserAccessTokensServer() {}
func (UnimplementedUserAccessTokensServer) testEmbeddedByValue()                          {}

// UnsafeUserAccessTokensServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccessTokensServer will
// result in compilation errors.
type UnsafeUserAccessTokensServer interface {
	mustEmbedUnimplementedUserAccessTokensServer()
}

func RegisterUserAccessTokensServer(s grpc.ServiceRegistrar, srv UserAccessTokensServer) {
	// If the following call pancis, it indicates UnimplementedUserAccessTokensServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAccessTokens_ServiceDesc, srv)
}

func _UserAccessTokens_GetUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessTokensServer).GetUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccessTokens_GetUserAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessTokensServer).GetUserAccessToken(ctx, req.(*UserAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccessTokens_AddUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessTokensServer).AddUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccessTokens_AddUserAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessTokensServer).AddUserAccessToken(ctx, req.(*AddUserAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccessTokens_ListUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessTokensServer).ListUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccessTokens_ListUserAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessTokensServer).ListUserAccessToken(ctx, req.(*ListUserAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccessTokens_UpdateUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessTokensServer).UpdateUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccessTokens_UpdateUserAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessTokensServer).UpdateUserAccessToken(ctx, req.(*UpdateUserAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccessTokens_DeleteUserAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccessTokensServer).DeleteUserAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAccessTokens_DeleteUserAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccessTokensServer).DeleteUserAccessToken(ctx, req.(*DeleteUserAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccessTokens_ServiceDesc is the grpc.ServiceDesc for UserAccessTokens service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccessTokens_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserAccessTokens",
	HandlerType: (*UserAccessTokensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserAccessToken",
			Handler:    _UserAccessTokens_GetUserAccessToken_Handler,
		},
		{
			MethodName: "AddUserAccessToken",
			Handler:    _UserAccessTokens_AddUserAccessToken_Handler,
		},
		{
			MethodName: "ListUserAccessToken",
			Handler:    _UserAccessTokens_ListUserAccessToken_Handler,
		},
		{
			MethodName: "UpdateUserAccessToken",
			Handler:    _UserAccessTokens_UpdateUserAccessToken_Handler,
		},
		{
			MethodName: "DeleteUserAccessToken",
			Handler:    _UserAccessTokens_DeleteUserAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_access_token.proto",
}
