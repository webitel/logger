// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: acr_chat_plan.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatPlan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Schema        *Lookup                `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Enabled       bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatPlan) Reset() {
	*x = ChatPlan{}
	mi := &file_acr_chat_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatPlan) ProtoMessage() {}

func (x *ChatPlan) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatPlan.ProtoReflect.Descriptor instead.
func (*ChatPlan) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{0}
}

func (x *ChatPlan) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChatPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatPlan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChatPlan) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ChatPlan) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type CreateChatPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Schema        *Lookup                `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Enabled       bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateChatPlanRequest) Reset() {
	*x = CreateChatPlanRequest{}
	mi := &file_acr_chat_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateChatPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatPlanRequest) ProtoMessage() {}

func (x *CreateChatPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatPlanRequest.ProtoReflect.Descriptor instead.
func (*CreateChatPlanRequest) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{1}
}

func (x *CreateChatPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChatPlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateChatPlanRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateChatPlanRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type SearchChatPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort          string                 `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields        []string               `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id            []int32                `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Enabled       bool                   `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchChatPlanRequest) Reset() {
	*x = SearchChatPlanRequest{}
	mi := &file_acr_chat_plan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchChatPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChatPlanRequest) ProtoMessage() {}

func (x *SearchChatPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChatPlanRequest.ProtoReflect.Descriptor instead.
func (*SearchChatPlanRequest) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{2}
}

func (x *SearchChatPlanRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchChatPlanRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchChatPlanRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchChatPlanRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchChatPlanRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchChatPlanRequest) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchChatPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchChatPlanRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ListChatPlan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Next          bool                   `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*ChatPlan            `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChatPlan) Reset() {
	*x = ListChatPlan{}
	mi := &file_acr_chat_plan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChatPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChatPlan) ProtoMessage() {}

func (x *ListChatPlan) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChatPlan.ProtoReflect.Descriptor instead.
func (*ListChatPlan) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{3}
}

func (x *ListChatPlan) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListChatPlan) GetItems() []*ChatPlan {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReadChatPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadChatPlanRequest) Reset() {
	*x = ReadChatPlanRequest{}
	mi := &file_acr_chat_plan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadChatPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadChatPlanRequest) ProtoMessage() {}

func (x *ReadChatPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadChatPlanRequest.ProtoReflect.Descriptor instead.
func (*ReadChatPlanRequest) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{4}
}

func (x *ReadChatPlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateChatPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Schema        *Lookup                `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Enabled       bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChatPlanRequest) Reset() {
	*x = UpdateChatPlanRequest{}
	mi := &file_acr_chat_plan_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChatPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChatPlanRequest) ProtoMessage() {}

func (x *UpdateChatPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChatPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateChatPlanRequest) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateChatPlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateChatPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateChatPlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateChatPlanRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *UpdateChatPlanRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type PatchChatPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Schema        *Lookup                `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Enabled       bool                   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Fields        []string               `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchChatPlanRequest) Reset() {
	*x = PatchChatPlanRequest{}
	mi := &file_acr_chat_plan_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchChatPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchChatPlanRequest) ProtoMessage() {}

func (x *PatchChatPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchChatPlanRequest.ProtoReflect.Descriptor instead.
func (*PatchChatPlanRequest) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{6}
}

func (x *PatchChatPlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchChatPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchChatPlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PatchChatPlanRequest) GetSchema() *Lookup {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *PatchChatPlanRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PatchChatPlanRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DeleteChatPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteChatPlanRequest) Reset() {
	*x = DeleteChatPlanRequest{}
	mi := &file_acr_chat_plan_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteChatPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChatPlanRequest) ProtoMessage() {}

func (x *DeleteChatPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acr_chat_plan_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChatPlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteChatPlanRequest) Descriptor() ([]byte, []int) {
	return file_acr_chat_plan_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteChatPlanRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_acr_chat_plan_proto protoreflect.FileDescriptor

const file_acr_chat_plan_proto_rawDesc = "" +
	"\n" +
	"\x13acr_chat_plan.proto\x12\x06engine\x1a\vconst.proto\x1a\x1cgoogle/api/annotations.proto\"\x92\x01\n" +
	"\bChatPlan\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12&\n" +
	"\x06schema\x18\x04 \x01(\v2\x0e.engine.LookupR\x06schema\x12\x18\n" +
	"\aenabled\x18\x05 \x01(\bR\aenabled\"\x8f\x01\n" +
	"\x15CreateChatPlanRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12&\n" +
	"\x06schema\x18\x03 \x01(\v2\x0e.engine.LookupR\x06schema\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabled\"\xb7\x01\n" +
	"\x15SearchChatPlanRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\f\n" +
	"\x01q\x18\x03 \x01(\tR\x01q\x12\x12\n" +
	"\x04sort\x18\x04 \x01(\tR\x04sort\x12\x16\n" +
	"\x06fields\x18\x05 \x03(\tR\x06fields\x12\x0e\n" +
	"\x02id\x18\x06 \x03(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12\x18\n" +
	"\aenabled\x18\b \x01(\bR\aenabled\"J\n" +
	"\fListChatPlan\x12\x12\n" +
	"\x04next\x18\x01 \x01(\bR\x04next\x12&\n" +
	"\x05items\x18\x02 \x03(\v2\x10.engine.ChatPlanR\x05items\"%\n" +
	"\x13ReadChatPlanRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"\x9f\x01\n" +
	"\x15UpdateChatPlanRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12&\n" +
	"\x06schema\x18\x04 \x01(\v2\x0e.engine.LookupR\x06schema\x12\x18\n" +
	"\aenabled\x18\x05 \x01(\bR\aenabled\"\xb6\x01\n" +
	"\x14PatchChatPlanRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12&\n" +
	"\x06schema\x18\x04 \x01(\v2\x0e.engine.LookupR\x06schema\x12\x18\n" +
	"\aenabled\x18\x05 \x01(\bR\aenabled\x12\x16\n" +
	"\x06fields\x18\x06 \x03(\tR\x06fields\"'\n" +
	"\x15DeleteChatPlanRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id2\x85\x05\n" +
	"\x16RoutingChatPlanService\x12d\n" +
	"\x0eCreateChatPlan\x12\x1d.engine.CreateChatPlanRequest\x1a\x10.engine.ChatPlan\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/routing/outbound/chat\x12e\n" +
	"\x0eSearchChatPlan\x12\x1d.engine.SearchChatPlanRequest\x1a\x14.engine.ListChatPlan\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/routing/outbound/chat\x12b\n" +
	"\fReadChatPlan\x12\x1b.engine.ReadChatPlanRequest\x1a\x10.engine.ChatPlan\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/routing/outbound/chat/{id}\x12i\n" +
	"\x0eUpdateChatPlan\x12\x1d.engine.UpdateChatPlanRequest\x1a\x10.engine.ChatPlan\"&\x82\xd3\xe4\x93\x02 :\x01*\x1a\x1b/routing/outbound/chat/{id}\x12g\n" +
	"\rPatchChatPlan\x12\x1c.engine.PatchChatPlanRequest\x1a\x10.engine.ChatPlan\"&\x82\xd3\xe4\x93\x02 :\x01*2\x1b/routing/outbound/chat/{id}\x12f\n" +
	"\x0eDeleteChatPlan\x12\x1d.engine.DeleteChatPlanRequest\x1a\x10.engine.ChatPlan\"#\x82\xd3\xe4\x93\x02\x1d*\x1b/routing/outbound/chat/{id}B\"Z github.com/webitel/protos/engineb\x06proto3"

var (
	file_acr_chat_plan_proto_rawDescOnce sync.Once
	file_acr_chat_plan_proto_rawDescData []byte
)

func file_acr_chat_plan_proto_rawDescGZIP() []byte {
	file_acr_chat_plan_proto_rawDescOnce.Do(func() {
		file_acr_chat_plan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_acr_chat_plan_proto_rawDesc), len(file_acr_chat_plan_proto_rawDesc)))
	})
	return file_acr_chat_plan_proto_rawDescData
}

var file_acr_chat_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_acr_chat_plan_proto_goTypes = []any{
	(*ChatPlan)(nil),              // 0: engine.ChatPlan
	(*CreateChatPlanRequest)(nil), // 1: engine.CreateChatPlanRequest
	(*SearchChatPlanRequest)(nil), // 2: engine.SearchChatPlanRequest
	(*ListChatPlan)(nil),          // 3: engine.ListChatPlan
	(*ReadChatPlanRequest)(nil),   // 4: engine.ReadChatPlanRequest
	(*UpdateChatPlanRequest)(nil), // 5: engine.UpdateChatPlanRequest
	(*PatchChatPlanRequest)(nil),  // 6: engine.PatchChatPlanRequest
	(*DeleteChatPlanRequest)(nil), // 7: engine.DeleteChatPlanRequest
	(*Lookup)(nil),                // 8: engine.Lookup
}
var file_acr_chat_plan_proto_depIdxs = []int32{
	8,  // 0: engine.ChatPlan.schema:type_name -> engine.Lookup
	8,  // 1: engine.CreateChatPlanRequest.schema:type_name -> engine.Lookup
	0,  // 2: engine.ListChatPlan.items:type_name -> engine.ChatPlan
	8,  // 3: engine.UpdateChatPlanRequest.schema:type_name -> engine.Lookup
	8,  // 4: engine.PatchChatPlanRequest.schema:type_name -> engine.Lookup
	1,  // 5: engine.RoutingChatPlanService.CreateChatPlan:input_type -> engine.CreateChatPlanRequest
	2,  // 6: engine.RoutingChatPlanService.SearchChatPlan:input_type -> engine.SearchChatPlanRequest
	4,  // 7: engine.RoutingChatPlanService.ReadChatPlan:input_type -> engine.ReadChatPlanRequest
	5,  // 8: engine.RoutingChatPlanService.UpdateChatPlan:input_type -> engine.UpdateChatPlanRequest
	6,  // 9: engine.RoutingChatPlanService.PatchChatPlan:input_type -> engine.PatchChatPlanRequest
	7,  // 10: engine.RoutingChatPlanService.DeleteChatPlan:input_type -> engine.DeleteChatPlanRequest
	0,  // 11: engine.RoutingChatPlanService.CreateChatPlan:output_type -> engine.ChatPlan
	3,  // 12: engine.RoutingChatPlanService.SearchChatPlan:output_type -> engine.ListChatPlan
	0,  // 13: engine.RoutingChatPlanService.ReadChatPlan:output_type -> engine.ChatPlan
	0,  // 14: engine.RoutingChatPlanService.UpdateChatPlan:output_type -> engine.ChatPlan
	0,  // 15: engine.RoutingChatPlanService.PatchChatPlan:output_type -> engine.ChatPlan
	0,  // 16: engine.RoutingChatPlanService.DeleteChatPlan:output_type -> engine.ChatPlan
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_acr_chat_plan_proto_init() }
func file_acr_chat_plan_proto_init() {
	if File_acr_chat_plan_proto != nil {
		return
	}
	file_const_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_acr_chat_plan_proto_rawDesc), len(file_acr_chat_plan_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acr_chat_plan_proto_goTypes,
		DependencyIndexes: file_acr_chat_plan_proto_depIdxs,
		MessageInfos:      file_acr_chat_plan_proto_msgTypes,
	}.Build()
	File_acr_chat_plan_proto = out.File
	file_acr_chat_plan_proto_goTypes = nil
	file_acr_chat_plan_proto_depIdxs = nil
}
