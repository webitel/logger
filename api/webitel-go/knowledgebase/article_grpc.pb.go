// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: knowledgebase/article.proto

package spaces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Articles_ListArticles_FullMethodName           = "/webitel.knowledgebase.Articles/ListArticles"
	Articles_LocateArticle_FullMethodName          = "/webitel.knowledgebase.Articles/LocateArticle"
	Articles_CreateArticle_FullMethodName          = "/webitel.knowledgebase.Articles/CreateArticle"
	Articles_UpdateArticle_FullMethodName          = "/webitel.knowledgebase.Articles/UpdateArticle"
	Articles_DeleteArticle_FullMethodName          = "/webitel.knowledgebase.Articles/DeleteArticle"
	Articles_ArticlesAttachmentList_FullMethodName = "/webitel.knowledgebase.Articles/ArticlesAttachmentList"
	Articles_ArticleVersionsList_FullMethodName    = "/webitel.knowledgebase.Articles/ArticleVersionsList"
	Articles_LocateArticleVersion_FullMethodName   = "/webitel.knowledgebase.Articles/LocateArticleVersion"
)

// ArticlesClient is the client API for Articles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Articles service catalogs.
type ArticlesClient interface {
	// List of the Space's Article(s).
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticleList, error)
	// Locate the space's Article association.
	LocateArticle(ctx context.Context, in *LocateArticleRequest, opts ...grpc.CallOption) (*Article, error)
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*ArticleList, error)
	// Update the space's Article details.
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*ArticleList, error)
	// Remove the space's Article association.
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*Article, error)
	ArticlesAttachmentList(ctx context.Context, in *ListAttachmentsRequest, opts ...grpc.CallOption) (*AttachmentList, error)
	ArticleVersionsList(ctx context.Context, in *ListArticleVersionsRequest, opts ...grpc.CallOption) (*ArticleVersionList, error)
	LocateArticleVersion(ctx context.Context, in *LocateArticleVersionRequest, opts ...grpc.CallOption) (*ArticleVersion, error)
}

type articlesClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlesClient(cc grpc.ClientConnInterface) ArticlesClient {
	return &articlesClient{cc}
}

func (c *articlesClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleList)
	err := c.cc.Invoke(ctx, Articles_ListArticles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) LocateArticle(ctx context.Context, in *LocateArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Article)
	err := c.cc.Invoke(ctx, Articles_LocateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*ArticleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleList)
	err := c.cc.Invoke(ctx, Articles_CreateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*ArticleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleList)
	err := c.cc.Invoke(ctx, Articles_UpdateArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Article)
	err := c.cc.Invoke(ctx, Articles_DeleteArticle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) ArticlesAttachmentList(ctx context.Context, in *ListAttachmentsRequest, opts ...grpc.CallOption) (*AttachmentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachmentList)
	err := c.cc.Invoke(ctx, Articles_ArticlesAttachmentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) ArticleVersionsList(ctx context.Context, in *ListArticleVersionsRequest, opts ...grpc.CallOption) (*ArticleVersionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleVersionList)
	err := c.cc.Invoke(ctx, Articles_ArticleVersionsList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlesClient) LocateArticleVersion(ctx context.Context, in *LocateArticleVersionRequest, opts ...grpc.CallOption) (*ArticleVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArticleVersion)
	err := c.cc.Invoke(ctx, Articles_LocateArticleVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlesServer is the server API for Articles service.
// All implementations must embed UnimplementedArticlesServer
// for forward compatibility.
//
// Articles service catalogs.
type ArticlesServer interface {
	// List of the Space's Article(s).
	ListArticles(context.Context, *ListArticlesRequest) (*ArticleList, error)
	// Locate the space's Article association.
	LocateArticle(context.Context, *LocateArticleRequest) (*Article, error)
	CreateArticle(context.Context, *CreateArticleRequest) (*ArticleList, error)
	// Update the space's Article details.
	UpdateArticle(context.Context, *UpdateArticleRequest) (*ArticleList, error)
	// Remove the space's Article association.
	DeleteArticle(context.Context, *DeleteArticleRequest) (*Article, error)
	ArticlesAttachmentList(context.Context, *ListAttachmentsRequest) (*AttachmentList, error)
	ArticleVersionsList(context.Context, *ListArticleVersionsRequest) (*ArticleVersionList, error)
	LocateArticleVersion(context.Context, *LocateArticleVersionRequest) (*ArticleVersion, error)
	mustEmbedUnimplementedArticlesServer()
}

// UnimplementedArticlesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArticlesServer struct{}

func (UnimplementedArticlesServer) ListArticles(context.Context, *ListArticlesRequest) (*ArticleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedArticlesServer) LocateArticle(context.Context, *LocateArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateArticle not implemented")
}
func (UnimplementedArticlesServer) CreateArticle(context.Context, *CreateArticleRequest) (*ArticleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticlesServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*ArticleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticlesServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticlesServer) ArticlesAttachmentList(context.Context, *ListAttachmentsRequest) (*AttachmentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticlesAttachmentList not implemented")
}
func (UnimplementedArticlesServer) ArticleVersionsList(context.Context, *ListArticleVersionsRequest) (*ArticleVersionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleVersionsList not implemented")
}
func (UnimplementedArticlesServer) LocateArticleVersion(context.Context, *LocateArticleVersionRequest) (*ArticleVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateArticleVersion not implemented")
}
func (UnimplementedArticlesServer) mustEmbedUnimplementedArticlesServer() {}
func (UnimplementedArticlesServer) testEmbeddedByValue()                  {}

// UnsafeArticlesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlesServer will
// result in compilation errors.
type UnsafeArticlesServer interface {
	mustEmbedUnimplementedArticlesServer()
}

func RegisterArticlesServer(s grpc.ServiceRegistrar, srv ArticlesServer) {
	// If the following call pancis, it indicates UnimplementedArticlesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Articles_ServiceDesc, srv)
}

func _Articles_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_ListArticles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_LocateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).LocateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_LocateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).LocateArticle(ctx, req.(*LocateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_ArticlesAttachmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).ArticlesAttachmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_ArticlesAttachmentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).ArticlesAttachmentList(ctx, req.(*ListAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_ArticleVersionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).ArticleVersionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_ArticleVersionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).ArticleVersionsList(ctx, req.(*ListArticleVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Articles_LocateArticleVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateArticleVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlesServer).LocateArticleVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Articles_LocateArticleVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlesServer).LocateArticleVersion(ctx, req.(*LocateArticleVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Articles_ServiceDesc is the grpc.ServiceDesc for Articles service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Articles_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.knowledgebase.Articles",
	HandlerType: (*ArticlesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArticles",
			Handler:    _Articles_ListArticles_Handler,
		},
		{
			MethodName: "LocateArticle",
			Handler:    _Articles_LocateArticle_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Articles_CreateArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Articles_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Articles_DeleteArticle_Handler,
		},
		{
			MethodName: "ArticlesAttachmentList",
			Handler:    _Articles_ArticlesAttachmentList_Handler,
		},
		{
			MethodName: "ArticleVersionsList",
			Handler:    _Articles_ArticleVersionsList_Handler,
		},
		{
			MethodName: "LocateArticleVersion",
			Handler:    _Articles_LocateArticleVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knowledgebase/article.proto",
}
