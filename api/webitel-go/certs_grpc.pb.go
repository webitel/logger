// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: certs.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CA_CertificateUsage_FullMethodName   = "/api.CA/CertificateUsage"
	CA_UpdateCertificate_FullMethodName  = "/api.CA/UpdateCertificate"
	CA_SearchCertificates_FullMethodName = "/api.CA/SearchCertificates"
	CA_GrantCertificate_FullMethodName   = "/api.CA/GrantCertificate"
	CA_RevokeCertificate_FullMethodName  = "/api.CA/RevokeCertificate"
)

// CAClient is the client API for CA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CAClient interface {
	// rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
	CertificateUsage(ctx context.Context, in *CertificateUsageRequest, opts ...grpc.CallOption) (*CertificateUsageResponse, error)
	// rpc VerifyCertificate(VerifyCertificateRequest) returns (VerifyCertificateResponse) {}
	UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*UpdateCertificateResponse, error)
	// later: rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokeCertificateResponse) {}
	SearchCertificates(ctx context.Context, in *SearchCertificatesRequest, opts ...grpc.CallOption) (*SearchCertificatesResponse, error)
	GrantCertificate(ctx context.Context, in *GrantCertificateRequest, opts ...grpc.CallOption) (*GrantCertificateResponse, error)
	RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error)
}

type cAClient struct {
	cc grpc.ClientConnInterface
}

func NewCAClient(cc grpc.ClientConnInterface) CAClient {
	return &cAClient{cc}
}

func (c *cAClient) CertificateUsage(ctx context.Context, in *CertificateUsageRequest, opts ...grpc.CallOption) (*CertificateUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertificateUsageResponse)
	err := c.cc.Invoke(ctx, CA_CertificateUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClient) UpdateCertificate(ctx context.Context, in *UpdateCertificateRequest, opts ...grpc.CallOption) (*UpdateCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCertificateResponse)
	err := c.cc.Invoke(ctx, CA_UpdateCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClient) SearchCertificates(ctx context.Context, in *SearchCertificatesRequest, opts ...grpc.CallOption) (*SearchCertificatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchCertificatesResponse)
	err := c.cc.Invoke(ctx, CA_SearchCertificates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClient) GrantCertificate(ctx context.Context, in *GrantCertificateRequest, opts ...grpc.CallOption) (*GrantCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GrantCertificateResponse)
	err := c.cc.Invoke(ctx, CA_GrantCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cAClient) RevokeCertificate(ctx context.Context, in *RevokeCertificateRequest, opts ...grpc.CallOption) (*RevokeCertificateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeCertificateResponse)
	err := c.cc.Invoke(ctx, CA_RevokeCertificate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CAServer is the server API for CA service.
// All implementations must embed UnimplementedCAServer
// for forward compatibility.
type CAServer interface {
	// rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
	CertificateUsage(context.Context, *CertificateUsageRequest) (*CertificateUsageResponse, error)
	// rpc VerifyCertificate(VerifyCertificateRequest) returns (VerifyCertificateResponse) {}
	UpdateCertificate(context.Context, *UpdateCertificateRequest) (*UpdateCertificateResponse, error)
	// later: rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokeCertificateResponse) {}
	SearchCertificates(context.Context, *SearchCertificatesRequest) (*SearchCertificatesResponse, error)
	GrantCertificate(context.Context, *GrantCertificateRequest) (*GrantCertificateResponse, error)
	RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error)
	mustEmbedUnimplementedCAServer()
}

// UnimplementedCAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCAServer struct{}

func (UnimplementedCAServer) CertificateUsage(context.Context, *CertificateUsageRequest) (*CertificateUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateUsage not implemented")
}
func (UnimplementedCAServer) UpdateCertificate(context.Context, *UpdateCertificateRequest) (*UpdateCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificate not implemented")
}
func (UnimplementedCAServer) SearchCertificates(context.Context, *SearchCertificatesRequest) (*SearchCertificatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCertificates not implemented")
}
func (UnimplementedCAServer) GrantCertificate(context.Context, *GrantCertificateRequest) (*GrantCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantCertificate not implemented")
}
func (UnimplementedCAServer) RevokeCertificate(context.Context, *RevokeCertificateRequest) (*RevokeCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeCertificate not implemented")
}
func (UnimplementedCAServer) mustEmbedUnimplementedCAServer() {}
func (UnimplementedCAServer) testEmbeddedByValue()            {}

// UnsafeCAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CAServer will
// result in compilation errors.
type UnsafeCAServer interface {
	mustEmbedUnimplementedCAServer()
}

func RegisterCAServer(s grpc.ServiceRegistrar, srv CAServer) {
	// If the following call pancis, it indicates UnimplementedCAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CA_ServiceDesc, srv)
}

func _CA_CertificateUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).CertificateUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CA_CertificateUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).CertificateUsage(ctx, req.(*CertificateUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CA_UpdateCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).UpdateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CA_UpdateCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).UpdateCertificate(ctx, req.(*UpdateCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CA_SearchCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCertificatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).SearchCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CA_SearchCertificates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).SearchCertificates(ctx, req.(*SearchCertificatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CA_GrantCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).GrantCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CA_GrantCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).GrantCertificate(ctx, req.(*GrantCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CA_RevokeCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CAServer).RevokeCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CA_RevokeCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CAServer).RevokeCertificate(ctx, req.(*RevokeCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CA_ServiceDesc is the grpc.ServiceDesc for CA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CA",
	HandlerType: (*CAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CertificateUsage",
			Handler:    _CA_CertificateUsage_Handler,
		},
		{
			MethodName: "UpdateCertificate",
			Handler:    _CA_UpdateCertificate_Handler,
		},
		{
			MethodName: "SearchCertificates",
			Handler:    _CA_SearchCertificates_Handler,
		},
		{
			MethodName: "GrantCertificate",
			Handler:    _CA_GrantCertificate_Handler,
		},
		{
			MethodName: "RevokeCertificate",
			Handler:    _CA_RevokeCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certs.proto",
}
