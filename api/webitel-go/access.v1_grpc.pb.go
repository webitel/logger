// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: access.v1.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessStore_ListObjectAccess_FullMethodName    = "/api.AccessStore/ListObjectAccess"
	AccessStore_ToggleObjectAccess_FullMethodName  = "/api.AccessStore/ToggleObjectAccess"
	AccessStore_ListDefaultAccess_FullMethodName   = "/api.AccessStore/ListDefaultAccess"
	AccessStore_ToggleDefaultAccess_FullMethodName = "/api.AccessStore/ToggleDefaultAccess"
)

// AccessStoreClient is the client API for AccessStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessStoreClient interface {
	ListObjectAccess(ctx context.Context, in *ListAccessRequestV1, opts ...grpc.CallOption) (*ListAccessResponseV1, error)
	// TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
	ToggleObjectAccess(ctx context.Context, in *UpdateAccessRequestV1, opts ...grpc.CallOption) (*UpdateAccessResponseV1, error)
	// default: TODO: indicate objclass=default as a default rights repo
	ListDefaultAccess(ctx context.Context, in *ListAccessRequestV1, opts ...grpc.CallOption) (*ListAccessResponseV1, error)
	// Same as UpdateAccess except for DEFAULT access control system
	ToggleDefaultAccess(ctx context.Context, in *ToggleDefaultAccessRequest, opts ...grpc.CallOption) (*ToggleDefaultAccessResponse, error)
}

type accessStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessStoreClient(cc grpc.ClientConnInterface) AccessStoreClient {
	return &accessStoreClient{cc}
}

func (c *accessStoreClient) ListObjectAccess(ctx context.Context, in *ListAccessRequestV1, opts ...grpc.CallOption) (*ListAccessResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessResponseV1)
	err := c.cc.Invoke(ctx, AccessStore_ListObjectAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessStoreClient) ToggleObjectAccess(ctx context.Context, in *UpdateAccessRequestV1, opts ...grpc.CallOption) (*UpdateAccessResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAccessResponseV1)
	err := c.cc.Invoke(ctx, AccessStore_ToggleObjectAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessStoreClient) ListDefaultAccess(ctx context.Context, in *ListAccessRequestV1, opts ...grpc.CallOption) (*ListAccessResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessResponseV1)
	err := c.cc.Invoke(ctx, AccessStore_ListDefaultAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessStoreClient) ToggleDefaultAccess(ctx context.Context, in *ToggleDefaultAccessRequest, opts ...grpc.CallOption) (*ToggleDefaultAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleDefaultAccessResponse)
	err := c.cc.Invoke(ctx, AccessStore_ToggleDefaultAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessStoreServer is the server API for AccessStore service.
// All implementations must embed UnimplementedAccessStoreServer
// for forward compatibility.
type AccessStoreServer interface {
	ListObjectAccess(context.Context, *ListAccessRequestV1) (*ListAccessResponseV1, error)
	// TODO: replace with GrantAccess API, to become command like GRANT REVOKE ... with empty access rights string
	ToggleObjectAccess(context.Context, *UpdateAccessRequestV1) (*UpdateAccessResponseV1, error)
	// default: TODO: indicate objclass=default as a default rights repo
	ListDefaultAccess(context.Context, *ListAccessRequestV1) (*ListAccessResponseV1, error)
	// Same as UpdateAccess except for DEFAULT access control system
	ToggleDefaultAccess(context.Context, *ToggleDefaultAccessRequest) (*ToggleDefaultAccessResponse, error)
	mustEmbedUnimplementedAccessStoreServer()
}

// UnimplementedAccessStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessStoreServer struct{}

func (UnimplementedAccessStoreServer) ListObjectAccess(context.Context, *ListAccessRequestV1) (*ListAccessResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectAccess not implemented")
}
func (UnimplementedAccessStoreServer) ToggleObjectAccess(context.Context, *UpdateAccessRequestV1) (*UpdateAccessResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleObjectAccess not implemented")
}
func (UnimplementedAccessStoreServer) ListDefaultAccess(context.Context, *ListAccessRequestV1) (*ListAccessResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDefaultAccess not implemented")
}
func (UnimplementedAccessStoreServer) ToggleDefaultAccess(context.Context, *ToggleDefaultAccessRequest) (*ToggleDefaultAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleDefaultAccess not implemented")
}
func (UnimplementedAccessStoreServer) mustEmbedUnimplementedAccessStoreServer() {}
func (UnimplementedAccessStoreServer) testEmbeddedByValue()                     {}

// UnsafeAccessStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessStoreServer will
// result in compilation errors.
type UnsafeAccessStoreServer interface {
	mustEmbedUnimplementedAccessStoreServer()
}

func RegisterAccessStoreServer(s grpc.ServiceRegistrar, srv AccessStoreServer) {
	// If the following call pancis, it indicates UnimplementedAccessStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessStore_ServiceDesc, srv)
}

func _AccessStore_ListObjectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessStoreServer).ListObjectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessStore_ListObjectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessStoreServer).ListObjectAccess(ctx, req.(*ListAccessRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessStore_ToggleObjectAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessStoreServer).ToggleObjectAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessStore_ToggleObjectAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessStoreServer).ToggleObjectAccess(ctx, req.(*UpdateAccessRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessStore_ListDefaultAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessStoreServer).ListDefaultAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessStore_ListDefaultAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessStoreServer).ListDefaultAccess(ctx, req.(*ListAccessRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessStore_ToggleDefaultAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleDefaultAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessStoreServer).ToggleDefaultAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessStore_ToggleDefaultAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessStoreServer).ToggleDefaultAccess(ctx, req.(*ToggleDefaultAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessStore_ServiceDesc is the grpc.ServiceDesc for AccessStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.AccessStore",
	HandlerType: (*AccessStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListObjectAccess",
			Handler:    _AccessStore_ListObjectAccess_Handler,
		},
		{
			MethodName: "ToggleObjectAccess",
			Handler:    _AccessStore_ToggleObjectAccess_Handler,
		},
		{
			MethodName: "ListDefaultAccess",
			Handler:    _AccessStore_ListDefaultAccess_Handler,
		},
		{
			MethodName: "ToggleDefaultAccess",
			Handler:    _AccessStore_ToggleDefaultAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "access.v1.proto",
}
