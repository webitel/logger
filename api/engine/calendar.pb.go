// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: calendar.proto

package engine

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Calendar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId      int64                  `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy     *Lookup                `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy     *Lookup                `protobuf:"bytes,6,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name          string                 `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	StartAt       int64                  `protobuf:"varint,8,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt         int64                  `protobuf:"varint,9,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Timezone      *Lookup                `protobuf:"bytes,10,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description   string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Accepts       []*AcceptOfDay         `protobuf:"bytes,12,rep,name=accepts,proto3" json:"accepts,omitempty"`
	Excepts       []*ExceptDate          `protobuf:"bytes,13,rep,name=excepts,proto3" json:"excepts,omitempty"`
	Specials      []*AcceptOfDay         `protobuf:"bytes,14,rep,name=specials,proto3" json:"specials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Calendar) Reset() {
	*x = Calendar{}
	mi := &file_calendar_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Calendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Calendar) ProtoMessage() {}

func (x *Calendar) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Calendar.ProtoReflect.Descriptor instead.
func (*Calendar) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{0}
}

func (x *Calendar) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Calendar) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *Calendar) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Calendar) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Calendar) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Calendar) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *Calendar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Calendar) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Calendar) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Calendar) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *Calendar) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Calendar) GetAccepts() []*AcceptOfDay {
	if x != nil {
		return x.Accepts
	}
	return nil
}

func (x *Calendar) GetExcepts() []*ExceptDate {
	if x != nil {
		return x.Excepts
	}
	return nil
}

func (x *Calendar) GetSpecials() []*AcceptOfDay {
	if x != nil {
		return x.Specials
	}
	return nil
}

type ExceptDate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Date          int64                  `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Repeat        bool                   `protobuf:"varint,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	Disabled      bool                   `protobuf:"varint,6,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Working       bool                   `protobuf:"varint,7,opt,name=working,proto3" json:"working,omitempty"`
	WorkStart     int32                  `protobuf:"varint,8,opt,name=work_start,json=workStart,proto3" json:"work_start,omitempty"`
	WorkStop      int32                  `protobuf:"varint,9,opt,name=work_stop,json=workStop,proto3" json:"work_stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExceptDate) Reset() {
	*x = ExceptDate{}
	mi := &file_calendar_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExceptDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExceptDate) ProtoMessage() {}

func (x *ExceptDate) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExceptDate.ProtoReflect.Descriptor instead.
func (*ExceptDate) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{1}
}

func (x *ExceptDate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExceptDate) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ExceptDate) GetRepeat() bool {
	if x != nil {
		return x.Repeat
	}
	return false
}

func (x *ExceptDate) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ExceptDate) GetWorking() bool {
	if x != nil {
		return x.Working
	}
	return false
}

func (x *ExceptDate) GetWorkStart() int32 {
	if x != nil {
		return x.WorkStart
	}
	return 0
}

func (x *ExceptDate) GetWorkStop() int32 {
	if x != nil {
		return x.WorkStop
	}
	return 0
}

type AcceptOfDay struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Day            int32                  `protobuf:"varint,2,opt,name=day,proto3" json:"day,omitempty"`
	StartTimeOfDay int32                  `protobuf:"varint,3,opt,name=start_time_of_day,json=startTimeOfDay,proto3" json:"start_time_of_day,omitempty"`
	EndTimeOfDay   int32                  `protobuf:"varint,4,opt,name=end_time_of_day,json=endTimeOfDay,proto3" json:"end_time_of_day,omitempty"`
	Disabled       bool                   `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AcceptOfDay) Reset() {
	*x = AcceptOfDay{}
	mi := &file_calendar_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptOfDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptOfDay) ProtoMessage() {}

func (x *AcceptOfDay) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptOfDay.ProtoReflect.Descriptor instead.
func (*AcceptOfDay) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{2}
}

func (x *AcceptOfDay) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *AcceptOfDay) GetStartTimeOfDay() int32 {
	if x != nil {
		return x.StartTimeOfDay
	}
	return 0
}

func (x *AcceptOfDay) GetEndTimeOfDay() int32 {
	if x != nil {
		return x.EndTimeOfDay
	}
	return 0
}

func (x *AcceptOfDay) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

type ListCalendar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Next          bool                   `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*Calendar            `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendar) Reset() {
	*x = ListCalendar{}
	mi := &file_calendar_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendar) ProtoMessage() {}

func (x *ListCalendar) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendar.ProtoReflect.Descriptor instead.
func (*ListCalendar) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{3}
}

func (x *ListCalendar) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListCalendar) GetItems() []*Calendar {
	if x != nil {
		return x.Items
	}
	return nil
}

type CreateCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartAt       int64                  `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt         int64                  `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Timezone      *Lookup                `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Accepts       []*AcceptOfDay         `protobuf:"bytes,6,rep,name=accepts,proto3" json:"accepts,omitempty"`
	Excepts       []*ExceptDate          `protobuf:"bytes,7,rep,name=excepts,proto3" json:"excepts,omitempty"`
	DomainId      int64                  `protobuf:"varint,8,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Specials      []*AcceptOfDay         `protobuf:"bytes,9,rep,name=specials,proto3" json:"specials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCalendarRequest) Reset() {
	*x = CreateCalendarRequest{}
	mi := &file_calendar_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCalendarRequest) ProtoMessage() {}

func (x *CreateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCalendarRequest.ProtoReflect.Descriptor instead.
func (*CreateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCalendarRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCalendarRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateCalendarRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *CreateCalendarRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *CreateCalendarRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCalendarRequest) GetAccepts() []*AcceptOfDay {
	if x != nil {
		return x.Accepts
	}
	return nil
}

func (x *CreateCalendarRequest) GetExcepts() []*ExceptDate {
	if x != nil {
		return x.Excepts
	}
	return nil
}

func (x *CreateCalendarRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *CreateCalendarRequest) GetSpecials() []*AcceptOfDay {
	if x != nil {
		return x.Specials
	}
	return nil
}

type SearchCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort          string                 `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields        []string               `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id            []uint32               `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchCalendarRequest) Reset() {
	*x = SearchCalendarRequest{}
	mi := &file_calendar_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCalendarRequest) ProtoMessage() {}

func (x *SearchCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCalendarRequest.ProtoReflect.Descriptor instead.
func (*SearchCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{5}
}

func (x *SearchCalendarRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchCalendarRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchCalendarRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCalendarRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchCalendarRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchCalendarRequest) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type ReadCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId      int64                  `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadCalendarRequest) Reset() {
	*x = ReadCalendarRequest{}
	mi := &file_calendar_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCalendarRequest) ProtoMessage() {}

func (x *ReadCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCalendarRequest.ProtoReflect.Descriptor instead.
func (*ReadCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{6}
}

func (x *ReadCalendarRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReadCalendarRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type DeleteCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DomainId      int64                  `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarRequest) Reset() {
	*x = DeleteCalendarRequest{}
	mi := &file_calendar_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarRequest) ProtoMessage() {}

func (x *DeleteCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCalendarRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteCalendarRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

type UpdateCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartAt       int64                  `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt         int64                  `protobuf:"varint,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Timezone      *Lookup                `protobuf:"bytes,5,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Accepts       []*AcceptOfDay         `protobuf:"bytes,7,rep,name=accepts,proto3" json:"accepts,omitempty"`
	Excepts       []*ExceptDate          `protobuf:"bytes,8,rep,name=excepts,proto3" json:"excepts,omitempty"`
	DomainId      int64                  `protobuf:"varint,9,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Specials      []*AcceptOfDay         `protobuf:"bytes,10,rep,name=specials,proto3" json:"specials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCalendarRequest) Reset() {
	*x = UpdateCalendarRequest{}
	mi := &file_calendar_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCalendarRequest) ProtoMessage() {}

func (x *UpdateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCalendarRequest.ProtoReflect.Descriptor instead.
func (*UpdateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCalendarRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCalendarRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCalendarRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *UpdateCalendarRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *UpdateCalendarRequest) GetTimezone() *Lookup {
	if x != nil {
		return x.Timezone
	}
	return nil
}

func (x *UpdateCalendarRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCalendarRequest) GetAccepts() []*AcceptOfDay {
	if x != nil {
		return x.Accepts
	}
	return nil
}

func (x *UpdateCalendarRequest) GetExcepts() []*ExceptDate {
	if x != nil {
		return x.Excepts
	}
	return nil
}

func (x *UpdateCalendarRequest) GetDomainId() int64 {
	if x != nil {
		return x.DomainId
	}
	return 0
}

func (x *UpdateCalendarRequest) GetSpecials() []*AcceptOfDay {
	if x != nil {
		return x.Specials
	}
	return nil
}

type SearchTimezonesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q             string                 `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort          string                 `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields        []string               `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id            []uint32               `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchTimezonesRequest) Reset() {
	*x = SearchTimezonesRequest{}
	mi := &file_calendar_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchTimezonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchTimezonesRequest) ProtoMessage() {}

func (x *SearchTimezonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchTimezonesRequest.ProtoReflect.Descriptor instead.
func (*SearchTimezonesRequest) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{9}
}

func (x *SearchTimezonesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchTimezonesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchTimezonesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchTimezonesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchTimezonesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchTimezonesRequest) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type ListTimezoneResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Next          bool                   `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items         []*Timezone            `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTimezoneResponse) Reset() {
	*x = ListTimezoneResponse{}
	mi := &file_calendar_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTimezoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimezoneResponse) ProtoMessage() {}

func (x *ListTimezoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimezoneResponse.ProtoReflect.Descriptor instead.
func (*ListTimezoneResponse) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{10}
}

func (x *ListTimezoneResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListTimezoneResponse) GetItems() []*Timezone {
	if x != nil {
		return x.Items
	}
	return nil
}

type Timezone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Offset        string                 `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Timezone) Reset() {
	*x = Timezone{}
	mi := &file_calendar_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timezone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timezone) ProtoMessage() {}

func (x *Timezone) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timezone.ProtoReflect.Descriptor instead.
func (*Timezone) Descriptor() ([]byte, []int) {
	return file_calendar_proto_rawDescGZIP(), []int{11}
}

func (x *Timezone) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Timezone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Timezone) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

var File_calendar_proto protoreflect.FileDescriptor

const file_calendar_proto_rawDesc = "" +
	"\n" +
	"\x0ecalendar.proto\x12\x06engine\x1a\vconst.proto\x1a\x1cgoogle/api/annotations.proto\"\xf5\x03\n" +
	"\bCalendar\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tdomain_id\x18\x02 \x01(\x03R\bdomainId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\x03R\tcreatedAt\x12-\n" +
	"\n" +
	"created_by\x18\x04 \x01(\v2\x0e.engine.LookupR\tcreatedBy\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x05 \x01(\x03R\tupdatedAt\x12-\n" +
	"\n" +
	"updated_by\x18\x06 \x01(\v2\x0e.engine.LookupR\tupdatedBy\x12\x12\n" +
	"\x04name\x18\a \x01(\tR\x04name\x12\x19\n" +
	"\bstart_at\x18\b \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\t \x01(\x03R\x05endAt\x12*\n" +
	"\btimezone\x18\n" +
	" \x01(\v2\x0e.engine.LookupR\btimezone\x12 \n" +
	"\vdescription\x18\v \x01(\tR\vdescription\x12-\n" +
	"\aaccepts\x18\f \x03(\v2\x13.engine.AcceptOfDayR\aaccepts\x12,\n" +
	"\aexcepts\x18\r \x03(\v2\x12.engine.ExceptDateR\aexcepts\x12/\n" +
	"\bspecials\x18\x0e \x03(\v2\x13.engine.AcceptOfDayR\bspecials\"\xbe\x01\n" +
	"\n" +
	"ExceptDate\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x12\n" +
	"\x04date\x18\x04 \x01(\x03R\x04date\x12\x16\n" +
	"\x06repeat\x18\x05 \x01(\bR\x06repeat\x12\x1a\n" +
	"\bdisabled\x18\x06 \x01(\bR\bdisabled\x12\x18\n" +
	"\aworking\x18\a \x01(\bR\aworking\x12\x1d\n" +
	"\n" +
	"work_start\x18\b \x01(\x05R\tworkStart\x12\x1b\n" +
	"\twork_stop\x18\t \x01(\x05R\bworkStop\"\x8d\x01\n" +
	"\vAcceptOfDay\x12\x10\n" +
	"\x03day\x18\x02 \x01(\x05R\x03day\x12)\n" +
	"\x11start_time_of_day\x18\x03 \x01(\x05R\x0estartTimeOfDay\x12%\n" +
	"\x0fend_time_of_day\x18\x04 \x01(\x05R\fendTimeOfDay\x12\x1a\n" +
	"\bdisabled\x18\x05 \x01(\bR\bdisabled\"J\n" +
	"\fListCalendar\x12\x12\n" +
	"\x04next\x18\x01 \x01(\bR\x04next\x12&\n" +
	"\x05items\x18\x02 \x03(\v2\x10.engine.CalendarR\x05items\"\xd6\x02\n" +
	"\x15CreateCalendarRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x19\n" +
	"\bstart_at\x18\x02 \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\x03 \x01(\x03R\x05endAt\x12*\n" +
	"\btimezone\x18\x04 \x01(\v2\x0e.engine.LookupR\btimezone\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12-\n" +
	"\aaccepts\x18\x06 \x03(\v2\x13.engine.AcceptOfDayR\aaccepts\x12,\n" +
	"\aexcepts\x18\a \x03(\v2\x12.engine.ExceptDateR\aexcepts\x12\x1b\n" +
	"\tdomain_id\x18\b \x01(\x03R\bdomainId\x12/\n" +
	"\bspecials\x18\t \x03(\v2\x13.engine.AcceptOfDayR\bspecials\"\x89\x01\n" +
	"\x15SearchCalendarRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\f\n" +
	"\x01q\x18\x03 \x01(\tR\x01q\x12\x12\n" +
	"\x04sort\x18\x04 \x01(\tR\x04sort\x12\x16\n" +
	"\x06fields\x18\x05 \x03(\tR\x06fields\x12\x0e\n" +
	"\x02id\x18\x06 \x03(\rR\x02id\"B\n" +
	"\x13ReadCalendarRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tdomain_id\x18\x02 \x01(\x03R\bdomainId\"D\n" +
	"\x15DeleteCalendarRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tdomain_id\x18\x02 \x01(\x03R\bdomainId\"\xe6\x02\n" +
	"\x15UpdateCalendarRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x19\n" +
	"\bstart_at\x18\x03 \x01(\x03R\astartAt\x12\x15\n" +
	"\x06end_at\x18\x04 \x01(\x03R\x05endAt\x12*\n" +
	"\btimezone\x18\x05 \x01(\v2\x0e.engine.LookupR\btimezone\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12-\n" +
	"\aaccepts\x18\a \x03(\v2\x13.engine.AcceptOfDayR\aaccepts\x12,\n" +
	"\aexcepts\x18\b \x03(\v2\x12.engine.ExceptDateR\aexcepts\x12\x1b\n" +
	"\tdomain_id\x18\t \x01(\x03R\bdomainId\x12/\n" +
	"\bspecials\x18\n" +
	" \x03(\v2\x13.engine.AcceptOfDayR\bspecials\"\x8a\x01\n" +
	"\x16SearchTimezonesRequest\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\f\n" +
	"\x01q\x18\x03 \x01(\tR\x01q\x12\x12\n" +
	"\x04sort\x18\x04 \x01(\tR\x04sort\x12\x16\n" +
	"\x06fields\x18\x05 \x03(\tR\x06fields\x12\x0e\n" +
	"\x02id\x18\x06 \x03(\rR\x02id\"R\n" +
	"\x14ListTimezoneResponse\x12\x12\n" +
	"\x04next\x18\x01 \x01(\bR\x04next\x12&\n" +
	"\x05items\x18\x02 \x03(\v2\x10.engine.TimezoneR\x05items\"F\n" +
	"\bTimezone\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\tR\x06offset2\xc8\x04\n" +
	"\x0fCalendarService\x12X\n" +
	"\x0eCreateCalendar\x12\x1d.engine.CreateCalendarRequest\x1a\x10.engine.Calendar\"\x15\x82\xd3\xe4\x93\x02\x0f:\x01*\"\n" +
	"/calendars\x12Y\n" +
	"\x0eSearchCalendar\x12\x1d.engine.SearchCalendarRequest\x1a\x14.engine.ListCalendar\"\x12\x82\xd3\xe4\x93\x02\f\x12\n" +
	"/calendars\x12V\n" +
	"\fReadCalendar\x12\x1b.engine.ReadCalendarRequest\x1a\x10.engine.Calendar\"\x17\x82\xd3\xe4\x93\x02\x11\x12\x0f/calendars/{id}\x12]\n" +
	"\x0eUpdateCalendar\x12\x1d.engine.UpdateCalendarRequest\x1a\x10.engine.Calendar\"\x1a\x82\xd3\xe4\x93\x02\x14:\x01*\x1a\x0f/calendars/{id}\x12Z\n" +
	"\x0eDeleteCalendar\x12\x1d.engine.DeleteCalendarRequest\x1a\x10.engine.Calendar\"\x17\x82\xd3\xe4\x93\x02\x11*\x0f/calendars/{id}\x12m\n" +
	"\x0fSearchTimezones\x12\x1e.engine.SearchTimezonesRequest\x1a\x1c.engine.ListTimezoneResponse\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/calendars/timezonesB\"Z github.com/webitel/protos/engineb\x06proto3"

var (
	file_calendar_proto_rawDescOnce sync.Once
	file_calendar_proto_rawDescData []byte
)

func file_calendar_proto_rawDescGZIP() []byte {
	file_calendar_proto_rawDescOnce.Do(func() {
		file_calendar_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_calendar_proto_rawDesc), len(file_calendar_proto_rawDesc)))
	})
	return file_calendar_proto_rawDescData
}

var file_calendar_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_calendar_proto_goTypes = []any{
	(*Calendar)(nil),               // 0: engine.Calendar
	(*ExceptDate)(nil),             // 1: engine.ExceptDate
	(*AcceptOfDay)(nil),            // 2: engine.AcceptOfDay
	(*ListCalendar)(nil),           // 3: engine.ListCalendar
	(*CreateCalendarRequest)(nil),  // 4: engine.CreateCalendarRequest
	(*SearchCalendarRequest)(nil),  // 5: engine.SearchCalendarRequest
	(*ReadCalendarRequest)(nil),    // 6: engine.ReadCalendarRequest
	(*DeleteCalendarRequest)(nil),  // 7: engine.DeleteCalendarRequest
	(*UpdateCalendarRequest)(nil),  // 8: engine.UpdateCalendarRequest
	(*SearchTimezonesRequest)(nil), // 9: engine.SearchTimezonesRequest
	(*ListTimezoneResponse)(nil),   // 10: engine.ListTimezoneResponse
	(*Timezone)(nil),               // 11: engine.Timezone
	(*Lookup)(nil),                 // 12: engine.Lookup
}
var file_calendar_proto_depIdxs = []int32{
	12, // 0: engine.Calendar.created_by:type_name -> engine.Lookup
	12, // 1: engine.Calendar.updated_by:type_name -> engine.Lookup
	12, // 2: engine.Calendar.timezone:type_name -> engine.Lookup
	2,  // 3: engine.Calendar.accepts:type_name -> engine.AcceptOfDay
	1,  // 4: engine.Calendar.excepts:type_name -> engine.ExceptDate
	2,  // 5: engine.Calendar.specials:type_name -> engine.AcceptOfDay
	0,  // 6: engine.ListCalendar.items:type_name -> engine.Calendar
	12, // 7: engine.CreateCalendarRequest.timezone:type_name -> engine.Lookup
	2,  // 8: engine.CreateCalendarRequest.accepts:type_name -> engine.AcceptOfDay
	1,  // 9: engine.CreateCalendarRequest.excepts:type_name -> engine.ExceptDate
	2,  // 10: engine.CreateCalendarRequest.specials:type_name -> engine.AcceptOfDay
	12, // 11: engine.UpdateCalendarRequest.timezone:type_name -> engine.Lookup
	2,  // 12: engine.UpdateCalendarRequest.accepts:type_name -> engine.AcceptOfDay
	1,  // 13: engine.UpdateCalendarRequest.excepts:type_name -> engine.ExceptDate
	2,  // 14: engine.UpdateCalendarRequest.specials:type_name -> engine.AcceptOfDay
	11, // 15: engine.ListTimezoneResponse.items:type_name -> engine.Timezone
	4,  // 16: engine.CalendarService.CreateCalendar:input_type -> engine.CreateCalendarRequest
	5,  // 17: engine.CalendarService.SearchCalendar:input_type -> engine.SearchCalendarRequest
	6,  // 18: engine.CalendarService.ReadCalendar:input_type -> engine.ReadCalendarRequest
	8,  // 19: engine.CalendarService.UpdateCalendar:input_type -> engine.UpdateCalendarRequest
	7,  // 20: engine.CalendarService.DeleteCalendar:input_type -> engine.DeleteCalendarRequest
	9,  // 21: engine.CalendarService.SearchTimezones:input_type -> engine.SearchTimezonesRequest
	0,  // 22: engine.CalendarService.CreateCalendar:output_type -> engine.Calendar
	3,  // 23: engine.CalendarService.SearchCalendar:output_type -> engine.ListCalendar
	0,  // 24: engine.CalendarService.ReadCalendar:output_type -> engine.Calendar
	0,  // 25: engine.CalendarService.UpdateCalendar:output_type -> engine.Calendar
	0,  // 26: engine.CalendarService.DeleteCalendar:output_type -> engine.Calendar
	10, // 27: engine.CalendarService.SearchTimezones:output_type -> engine.ListTimezoneResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_calendar_proto_init() }
func file_calendar_proto_init() {
	if File_calendar_proto != nil {
		return
	}
	file_const_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_calendar_proto_rawDesc), len(file_calendar_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_calendar_proto_goTypes,
		DependencyIndexes: file_calendar_proto_depIdxs,
		MessageInfos:      file_calendar_proto_msgTypes,
	}.Build()
	File_calendar_proto = out.File
	file_calendar_proto_goTypes = nil
	file_calendar_proto_depIdxs = nil
}
