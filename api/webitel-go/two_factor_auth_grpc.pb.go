// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: two_factor_auth.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwoFactorAuthentication_GenerateUserTfaKey_FullMethodName               = "/api.TwoFactorAuthentication/GenerateUserTfaKey"
	TwoFactorAuthentication_GetUserTfaKey_FullMethodName                    = "/api.TwoFactorAuthentication/GetUserTfaKey"
	TwoFactorAuthentication_GenerateTfaKeysForNecessaryUsers_FullMethodName = "/api.TwoFactorAuthentication/GenerateTfaKeysForNecessaryUsers"
)

// TwoFactorAuthenticationClient is the client API for TwoFactorAuthentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwoFactorAuthenticationClient interface {
	// GenerateUserTfaKey generates new or regenerates secret for the concrete user
	GenerateUserTfaKey(ctx context.Context, in *GenerateUserTfaKeyRequest, opts ...grpc.CallOption) (*GenerateUserTfaKeyResponse, error)
	// GetUserTfaKey locates the secret for user and returns it as a TOTP url
	GetUserTfaKey(ctx context.Context, in *GetUserTfaKeyRequest, opts ...grpc.CallOption) (*GetUserTfaKeyResponse, error)
	// GenerateTotpForNecessaryUsers generates necessary (not generated previously) totp keys for users in the domain
	GenerateTfaKeysForNecessaryUsers(ctx context.Context, in *GenerateTfaKeysForNecessaryUsersRequest, opts ...grpc.CallOption) (*GenerateTfaKeysForNecessaryUsersResponse, error)
}

type twoFactorAuthenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewTwoFactorAuthenticationClient(cc grpc.ClientConnInterface) TwoFactorAuthenticationClient {
	return &twoFactorAuthenticationClient{cc}
}

func (c *twoFactorAuthenticationClient) GenerateUserTfaKey(ctx context.Context, in *GenerateUserTfaKeyRequest, opts ...grpc.CallOption) (*GenerateUserTfaKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateUserTfaKeyResponse)
	err := c.cc.Invoke(ctx, TwoFactorAuthentication_GenerateUserTfaKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorAuthenticationClient) GetUserTfaKey(ctx context.Context, in *GetUserTfaKeyRequest, opts ...grpc.CallOption) (*GetUserTfaKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserTfaKeyResponse)
	err := c.cc.Invoke(ctx, TwoFactorAuthentication_GetUserTfaKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twoFactorAuthenticationClient) GenerateTfaKeysForNecessaryUsers(ctx context.Context, in *GenerateTfaKeysForNecessaryUsersRequest, opts ...grpc.CallOption) (*GenerateTfaKeysForNecessaryUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTfaKeysForNecessaryUsersResponse)
	err := c.cc.Invoke(ctx, TwoFactorAuthentication_GenerateTfaKeysForNecessaryUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwoFactorAuthenticationServer is the server API for TwoFactorAuthentication service.
// All implementations must embed UnimplementedTwoFactorAuthenticationServer
// for forward compatibility.
type TwoFactorAuthenticationServer interface {
	// GenerateUserTfaKey generates new or regenerates secret for the concrete user
	GenerateUserTfaKey(context.Context, *GenerateUserTfaKeyRequest) (*GenerateUserTfaKeyResponse, error)
	// GetUserTfaKey locates the secret for user and returns it as a TOTP url
	GetUserTfaKey(context.Context, *GetUserTfaKeyRequest) (*GetUserTfaKeyResponse, error)
	// GenerateTotpForNecessaryUsers generates necessary (not generated previously) totp keys for users in the domain
	GenerateTfaKeysForNecessaryUsers(context.Context, *GenerateTfaKeysForNecessaryUsersRequest) (*GenerateTfaKeysForNecessaryUsersResponse, error)
	mustEmbedUnimplementedTwoFactorAuthenticationServer()
}

// UnimplementedTwoFactorAuthenticationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwoFactorAuthenticationServer struct{}

func (UnimplementedTwoFactorAuthenticationServer) GenerateUserTfaKey(context.Context, *GenerateUserTfaKeyRequest) (*GenerateUserTfaKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUserTfaKey not implemented")
}
func (UnimplementedTwoFactorAuthenticationServer) GetUserTfaKey(context.Context, *GetUserTfaKeyRequest) (*GetUserTfaKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTfaKey not implemented")
}
func (UnimplementedTwoFactorAuthenticationServer) GenerateTfaKeysForNecessaryUsers(context.Context, *GenerateTfaKeysForNecessaryUsersRequest) (*GenerateTfaKeysForNecessaryUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTfaKeysForNecessaryUsers not implemented")
}
func (UnimplementedTwoFactorAuthenticationServer) mustEmbedUnimplementedTwoFactorAuthenticationServer() {
}
func (UnimplementedTwoFactorAuthenticationServer) testEmbeddedByValue() {}

// UnsafeTwoFactorAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwoFactorAuthenticationServer will
// result in compilation errors.
type UnsafeTwoFactorAuthenticationServer interface {
	mustEmbedUnimplementedTwoFactorAuthenticationServer()
}

func RegisterTwoFactorAuthenticationServer(s grpc.ServiceRegistrar, srv TwoFactorAuthenticationServer) {
	// If the following call pancis, it indicates UnimplementedTwoFactorAuthenticationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwoFactorAuthentication_ServiceDesc, srv)
}

func _TwoFactorAuthentication_GenerateUserTfaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateUserTfaKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorAuthenticationServer).GenerateUserTfaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoFactorAuthentication_GenerateUserTfaKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorAuthenticationServer).GenerateUserTfaKey(ctx, req.(*GenerateUserTfaKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactorAuthentication_GetUserTfaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTfaKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorAuthenticationServer).GetUserTfaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoFactorAuthentication_GetUserTfaKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorAuthenticationServer).GetUserTfaKey(ctx, req.(*GetUserTfaKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwoFactorAuthentication_GenerateTfaKeysForNecessaryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTfaKeysForNecessaryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwoFactorAuthenticationServer).GenerateTfaKeysForNecessaryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwoFactorAuthentication_GenerateTfaKeysForNecessaryUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwoFactorAuthenticationServer).GenerateTfaKeysForNecessaryUsers(ctx, req.(*GenerateTfaKeysForNecessaryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwoFactorAuthentication_ServiceDesc is the grpc.ServiceDesc for TwoFactorAuthentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwoFactorAuthentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TwoFactorAuthentication",
	HandlerType: (*TwoFactorAuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateUserTfaKey",
			Handler:    _TwoFactorAuthentication_GenerateUserTfaKey_Handler,
		},
		{
			MethodName: "GetUserTfaKey",
			Handler:    _TwoFactorAuthentication_GetUserTfaKey_Handler,
		},
		{
			MethodName: "GenerateTfaKeysForNecessaryUsers",
			Handler:    _TwoFactorAuthentication_GenerateTfaKeysForNecessaryUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "two_factor_auth.proto",
}
