// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: knowledgebase/spaces.proto

package spaces

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Spaces_ListSpaces_FullMethodName  = "/webitel.knowledgebase.Spaces/ListSpaces"
	Spaces_LocateSpace_FullMethodName = "/webitel.knowledgebase.Spaces/LocateSpace"
	Spaces_CreateSpace_FullMethodName = "/webitel.knowledgebase.Spaces/CreateSpace"
	Spaces_UpdateSpace_FullMethodName = "/webitel.knowledgebase.Spaces/UpdateSpace"
	Spaces_DeleteSpace_FullMethodName = "/webitel.knowledgebase.Spaces/DeleteSpace"
)

// SpacesClient is the client API for Spaces service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpacesClient interface {
	ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*SpaceList, error)
	// Locate spaces source
	LocateSpace(ctx context.Context, in *LocateSpacesRequest, opts ...grpc.CallOption) (*Space, error)
	// Create NEW Space
	CreateSpace(ctx context.Context, in *InputSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// NEW Update of the Space source
	UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error)
	// Remove Space source
	DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*Space, error)
}

type spacesClient struct {
	cc grpc.ClientConnInterface
}

func NewSpacesClient(cc grpc.ClientConnInterface) SpacesClient {
	return &spacesClient{cc}
}

func (c *spacesClient) ListSpaces(ctx context.Context, in *ListSpacesRequest, opts ...grpc.CallOption) (*SpaceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpaceList)
	err := c.cc.Invoke(ctx, Spaces_ListSpaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) LocateSpace(ctx context.Context, in *LocateSpacesRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, Spaces_LocateSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) CreateSpace(ctx context.Context, in *InputSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, Spaces_CreateSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) UpdateSpace(ctx context.Context, in *UpdateSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, Spaces_UpdateSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacesClient) DeleteSpace(ctx context.Context, in *DeleteSpaceRequest, opts ...grpc.CallOption) (*Space, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Space)
	err := c.cc.Invoke(ctx, Spaces_DeleteSpace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpacesServer is the server API for Spaces service.
// All implementations must embed UnimplementedSpacesServer
// for forward compatibility.
type SpacesServer interface {
	ListSpaces(context.Context, *ListSpacesRequest) (*SpaceList, error)
	// Locate spaces source
	LocateSpace(context.Context, *LocateSpacesRequest) (*Space, error)
	// Create NEW Space
	CreateSpace(context.Context, *InputSpaceRequest) (*Space, error)
	// NEW Update of the Space source
	UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error)
	// Remove Space source
	DeleteSpace(context.Context, *DeleteSpaceRequest) (*Space, error)
	mustEmbedUnimplementedSpacesServer()
}

// UnimplementedSpacesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpacesServer struct{}

func (UnimplementedSpacesServer) ListSpaces(context.Context, *ListSpacesRequest) (*SpaceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpaces not implemented")
}
func (UnimplementedSpacesServer) LocateSpace(context.Context, *LocateSpacesRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocateSpace not implemented")
}
func (UnimplementedSpacesServer) CreateSpace(context.Context, *InputSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpace not implemented")
}
func (UnimplementedSpacesServer) UpdateSpace(context.Context, *UpdateSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpace not implemented")
}
func (UnimplementedSpacesServer) DeleteSpace(context.Context, *DeleteSpaceRequest) (*Space, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpace not implemented")
}
func (UnimplementedSpacesServer) mustEmbedUnimplementedSpacesServer() {}
func (UnimplementedSpacesServer) testEmbeddedByValue()                {}

// UnsafeSpacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpacesServer will
// result in compilation errors.
type UnsafeSpacesServer interface {
	mustEmbedUnimplementedSpacesServer()
}

func RegisterSpacesServer(s grpc.ServiceRegistrar, srv SpacesServer) {
	// If the following call pancis, it indicates UnimplementedSpacesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Spaces_ServiceDesc, srv)
}

func _Spaces_ListSpaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).ListSpaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spaces_ListSpaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).ListSpaces(ctx, req.(*ListSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_LocateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateSpacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).LocateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spaces_LocateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).LocateSpace(ctx, req.(*LocateSpacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_CreateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).CreateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spaces_CreateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).CreateSpace(ctx, req.(*InputSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_UpdateSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).UpdateSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spaces_UpdateSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).UpdateSpace(ctx, req.(*UpdateSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spaces_DeleteSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacesServer).DeleteSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spaces_DeleteSpace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacesServer).DeleteSpace(ctx, req.(*DeleteSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Spaces_ServiceDesc is the grpc.ServiceDesc for Spaces service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spaces_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.knowledgebase.Spaces",
	HandlerType: (*SpacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSpaces",
			Handler:    _Spaces_ListSpaces_Handler,
		},
		{
			MethodName: "LocateSpace",
			Handler:    _Spaces_LocateSpace_Handler,
		},
		{
			MethodName: "CreateSpace",
			Handler:    _Spaces_CreateSpace_Handler,
		},
		{
			MethodName: "UpdateSpace",
			Handler:    _Spaces_UpdateSpace_Handler,
		},
		{
			MethodName: "DeleteSpace",
			Handler:    _Spaces_DeleteSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "knowledgebase/spaces.proto",
}
