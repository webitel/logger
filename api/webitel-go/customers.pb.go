// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: customers.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerInfoRequest) Reset() {
	*x = ServerInfoRequest{}
	mi := &file_customers_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoRequest) ProtoMessage() {}

func (x *ServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoRequest.ProtoReflect.Descriptor instead.
func (*ServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{0}
}

type ServerInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// int64 time = 1; // current timestamp (ms)
	Key           []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerInfoResponse) Reset() {
	*x = ServerInfoResponse{}
	mi := &file_customers_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoResponse) ProtoMessage() {}

func (x *ServerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoResponse.ProtoReflect.Descriptor instead.
func (*ServerInfoResponse) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{1}
}

func (x *ServerInfoResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type Verification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Errors        []string               `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"` // invalid
	Notify        []string               `protobuf:"bytes,2,rep,name=notify,proto3" json:"notify,omitempty"` // non-fatal warnings, e.g.:
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Verification) Reset() {
	*x = Verification{}
	mi := &file_customers_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verification) ProtoMessage() {}

func (x *Verification) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verification.ProtoReflect.Descriptor instead.
func (*Verification) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{2}
}

func (x *Verification) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Verification) GetNotify() []string {
	if x != nil {
		return x.Notify
	}
	return nil
}

// USAGE details
type LicenseUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                 // license.id
	Prod          string                 `protobuf:"bytes,2,opt,name=prod,proto3" json:"prod,omitempty"`                             // license.prod
	User          *ObjectId              `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                             // grant to::user
	Scope         []string               `protobuf:"bytes,6,rep,name=scope,proto3" json:"scope,omitempty"`                           // setof objclass grants
	IssuedAt      int64                  `protobuf:"varint,4,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`    // not before
	ExpiresAt     int64                  `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // not after
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseUser) Reset() {
	*x = LicenseUser{}
	mi := &file_customers_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseUser) ProtoMessage() {}

func (x *LicenseUser) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseUser.ProtoReflect.Descriptor instead.
func (*LicenseUser) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{3}
}

func (x *LicenseUser) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LicenseUser) GetProd() string {
	if x != nil {
		return x.Prod
	}
	return ""
}

func (x *LicenseUser) GetUser() *ObjectId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LicenseUser) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *LicenseUser) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *LicenseUser) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

type LicenseV1 struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                 // serial number assigned (global::License-ID)
	NotBefore   int64                  `protobuf:"varint,2,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"` // optional
	NotAfter    int64                  `protobuf:"varint,3,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`    // optional
	Product     string                 `protobuf:"bytes,4,opt,name=product,proto3" json:"product,omitempty"`                       // product name, e.g.: DEVICE, MANAGER, OPERATOR
	Scope       []string               `protobuf:"bytes,5,rep,name=scope,proto3" json:"scope,omitempty"`                           // list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...
	Competitive bool                   `protobuf:"varint,6,opt,name=competitive,proto3" json:"competitive,omitempty"`
	Limit       int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"` // required: limit count (maximum allowed usage quantity)
	// operational attributes ...
	// remain = limit - len(users)
	Remain        int32          `protobuf:"varint,8,opt,name=remain,proto3" json:"remain,omitempty"` // available
	Users         []*LicenseUser `protobuf:"bytes,9,rep,name=users,proto3" json:"users,omitempty"`    // users.id (grantees)
	Status        *Verification  `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseV1) Reset() {
	*x = LicenseV1{}
	mi := &file_customers_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseV1) ProtoMessage() {}

func (x *LicenseV1) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseV1.ProtoReflect.Descriptor instead.
func (*LicenseV1) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{4}
}

func (x *LicenseV1) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LicenseV1) GetNotBefore() int64 {
	if x != nil {
		return x.NotBefore
	}
	return 0
}

func (x *LicenseV1) GetNotAfter() int64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

func (x *LicenseV1) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *LicenseV1) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *LicenseV1) GetCompetitive() bool {
	if x != nil {
		return x.Competitive
	}
	return false
}

func (x *LicenseV1) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LicenseV1) GetRemain() int32 {
	if x != nil {
		return x.Remain
	}
	return 0
}

func (x *LicenseV1) GetUsers() []*LicenseUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *LicenseV1) GetStatus() *Verification {
	if x != nil {
		return x.Status
	}
	return nil
}

type Customer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // serial number assigned (global::Customer-ID)
	// string version = 2; // version
	// local store details
	CreatedAt int64 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // local created ms
	UpdatedAt int64 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // last uploaded ms
	RevokedAt int64 `protobuf:"varint,4,opt,name=revoked_at,json=revokedAt,proto3" json:"revoked_at,omitempty"` // local revoked ms
	// registration name
	Organization string `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	// validity boundaries
	IssuedAt  int64 `protobuf:"varint,6,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`    // [required] issuer(CA) created at
	NotBefore int64 `protobuf:"varint,7,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"` // [optional] valid from
	NotAfter  int64 `protobuf:"varint,8,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`    // [required] valid till
	// signature validity
	ThisUpdate int64 `protobuf:"varint,9,opt,name=this_update,json=thisUpdate,proto3" json:"this_update,omitempty"`  // [optional]: issuer(CA) signed at
	NextUpdate int64 `protobuf:"varint,10,opt,name=next_update,json=nextUpdate,proto3" json:"next_update,omitempty"` // [optional]: signature expires; update required after
	// Verification status
	Verify *Verification `protobuf:"bytes,11,opt,name=verify,proto3" json:"verify,omitempty"` // [optional] validation results
	// extensions granted
	Limit map[string]int32 `protobuf:"bytes,12,rep,name=limit,proto3" json:"limit,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // defines map[class]limit usage
	// int32 competitive = 13; // zero-based competitive sessions limit ?
	License       []*LicenseV1 `protobuf:"bytes,14,rep,name=license,proto3" json:"license,omitempty"` // grants issued
	Dnsrv         []*ObjectId  `protobuf:"bytes,15,rep,name=dnsrv,proto3" json:"dnsrv,omitempty"`     // [optional] domains
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Customer) Reset() {
	*x = Customer{}
	mi := &file_customers_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{5}
}

func (x *Customer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Customer) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Customer) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Customer) GetRevokedAt() int64 {
	if x != nil {
		return x.RevokedAt
	}
	return 0
}

func (x *Customer) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *Customer) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *Customer) GetNotBefore() int64 {
	if x != nil {
		return x.NotBefore
	}
	return 0
}

func (x *Customer) GetNotAfter() int64 {
	if x != nil {
		return x.NotAfter
	}
	return 0
}

func (x *Customer) GetThisUpdate() int64 {
	if x != nil {
		return x.ThisUpdate
	}
	return 0
}

func (x *Customer) GetNextUpdate() int64 {
	if x != nil {
		return x.NextUpdate
	}
	return 0
}

func (x *Customer) GetVerify() *Verification {
	if x != nil {
		return x.Verify
	}
	return nil
}

func (x *Customer) GetLimit() map[string]int32 {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *Customer) GetLicense() []*LicenseV1 {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *Customer) GetDnsrv() []*ObjectId {
	if x != nil {
		return x.Dnsrv
	}
	return nil
}

// GET /users/{user.id}/license
// GET /domains/{domain.id}/license
// GET /license/{filter=**}
type LicenseUsageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Search Options ----- //
	Size   int32    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`    // default: 16
	Page   int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`    // default: 1
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"` // set of output fields
	Sort   []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`     // e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	// ----- Search Filters ----- //
	User       *ObjectId `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"` // to user assigned
	Domain     *ObjectId `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	CustomerId string    `protobuf:"bytes,7,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Id         []string  `protobuf:"bytes,8,rep,name=id,proto3" json:"id,omitempty"`           // by serial number(s)
	Product    []string  `protobuf:"bytes,9,rep,name=product,proto3" json:"product,omitempty"` // by product name(s)
	// view: all|valid|grantable
	Valid         bool   `protobuf:"varint,10,opt,name=valid,proto3" json:"valid,omitempty"` // show: available to be granted
	Q             string `protobuf:"bytes,11,opt,name=q,proto3" json:"q,omitempty"`          // filter: term of search
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseUsageRequest) Reset() {
	*x = LicenseUsageRequest{}
	mi := &file_customers_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseUsageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseUsageRequest) ProtoMessage() {}

func (x *LicenseUsageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseUsageRequest.ProtoReflect.Descriptor instead.
func (*LicenseUsageRequest) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{6}
}

func (x *LicenseUsageRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LicenseUsageRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LicenseUsageRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LicenseUsageRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *LicenseUsageRequest) GetUser() *ObjectId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *LicenseUsageRequest) GetDomain() *ObjectId {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *LicenseUsageRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *LicenseUsageRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LicenseUsageRequest) GetProduct() []string {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *LicenseUsageRequest) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *LicenseUsageRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type LicenseUsageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Result paging ----- //
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // this page number !
	Next bool  `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"` // next page exists ? more results ?
	//	size = (.next ? len(items) : undef (> len(size)))
	//
	// ----- Result entries ----- //
	Items         []*LicenseV1 `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseUsageResponse) Reset() {
	*x = LicenseUsageResponse{}
	mi := &file_customers_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseUsageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseUsageResponse) ProtoMessage() {}

func (x *LicenseUsageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseUsageResponse.ProtoReflect.Descriptor instead.
func (*LicenseUsageResponse) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{7}
}

func (x *LicenseUsageResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LicenseUsageResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *LicenseUsageResponse) GetItems() []*LicenseV1 {
	if x != nil {
		return x.Items
	}
	return nil
}

// ProductUser GRANT details
type ProductUser struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *ObjectId              `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`                             // grant to::user
	Domain        *ObjectId              `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`                         // grant to::domain
	IssuedAt      int64                  `protobuf:"varint,3,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`    // not before
	ExpiresAt     int64                  `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // not after
	Sessions      int32                  `protobuf:"varint,5,opt,name=sessions,proto3" json:"sessions,omitempty"`                    // User's active sessions count !
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProductUser) Reset() {
	*x = ProductUser{}
	mi := &file_customers_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductUser) ProtoMessage() {}

func (x *ProductUser) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductUser.ProtoReflect.Descriptor instead.
func (*ProductUser) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{8}
}

func (x *ProductUser) GetUser() *ObjectId {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ProductUser) GetDomain() *ObjectId {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *ProductUser) GetIssuedAt() int64 {
	if x != nil {
		return x.IssuedAt
	}
	return 0
}

func (x *ProductUser) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *ProductUser) GetSessions() int32 {
	if x != nil {
		return x.Sessions
	}
	return 0
}

type LicenseUsersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Search Options ----- //
	Size   int32    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`    // default: 16
	Page   int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`    // default: 1
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"` // set of output fields
	Sort   []string `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`     // e.g.: "updated_at" - ASC; "!updated_at" - DESC;
	// ----- Search Filters ----- //
	Id            string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"` // REQUIRED Product ID
	Q             string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`   // filter: term of search (username)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseUsersRequest) Reset() {
	*x = LicenseUsersRequest{}
	mi := &file_customers_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseUsersRequest) ProtoMessage() {}

func (x *LicenseUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseUsersRequest.ProtoReflect.Descriptor instead.
func (*LicenseUsersRequest) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{9}
}

func (x *LicenseUsersRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LicenseUsersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LicenseUsersRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LicenseUsersRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *LicenseUsersRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LicenseUsersRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type LicenseUsersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ----- Result paging ----- //
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"` // this page number !
	Next bool  `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"` // next page exists ? more results ?
	//	size = (.next ? len(items) : undef (> len(size)))
	//
	// ----- Result entries ----- //
	Items         []*ProductUser `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LicenseUsersResponse) Reset() {
	*x = LicenseUsersResponse{}
	mi := &file_customers_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LicenseUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseUsersResponse) ProtoMessage() {}

func (x *LicenseUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseUsersResponse.ProtoReflect.Descriptor instead.
func (*LicenseUsersResponse) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{10}
}

func (x *LicenseUsersResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LicenseUsersResponse) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *LicenseUsersResponse) GetItems() []*ProductUser {
	if x != nil {
		return x.Items
	}
	return nil
}

// GET /customer:sessionCustomer
// GET /customers/{id}
type GetCustomerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Available Filters
	Id     string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // show by customer id; serial number (uuid)
	Valid  bool      `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`  // show if valid only!
	Domain *ObjectId `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"` // find by domain relation
	// Request Controls
	Fields        []string `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"` // serial,
	Sort          []string `protobuf:"bytes,11,rep,name=sort,proto3" json:"sort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCustomerRequest) Reset() {
	*x = GetCustomerRequest{}
	mi := &file_customers_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerRequest) ProtoMessage() {}

func (x *GetCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerRequest) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{11}
}

func (x *GetCustomerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCustomerRequest) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *GetCustomerRequest) GetDomain() *ObjectId {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *GetCustomerRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetCustomerRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

type GetCustomerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Customer      *Customer              `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCustomerResponse) Reset() {
	*x = GetCustomerResponse{}
	mi := &file_customers_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerResponse) ProtoMessage() {}

func (x *GetCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerResponse.ProtoReflect.Descriptor instead.
func (*GetCustomerResponse) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{12}
}

func (x *GetCustomerResponse) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

// PUT /customer
type UpdateCustomerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Organization  string                 `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`                  // [optional] e.g.: Example Org.
	LogoPicture   []byte                 `protobuf:"bytes,2,opt,name=logo_picture,json=logoPicture,proto3" json:"logo_picture,omitempty"` // [optional] logo source image
	Certificate   []byte                 `protobuf:"bytes,3,opt,name=certificate,proto3" json:"certificate,omitempty"`                    // [optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding
	Revoke        bool                   `protobuf:"varint,4,opt,name=revoke,proto3" json:"revoke,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCustomerRequest) Reset() {
	*x = UpdateCustomerRequest{}
	mi := &file_customers_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerRequest) ProtoMessage() {}

func (x *UpdateCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerRequest) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCustomerRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *UpdateCustomerRequest) GetLogoPicture() []byte {
	if x != nil {
		return x.LogoPicture
	}
	return nil
}

func (x *UpdateCustomerRequest) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *UpdateCustomerRequest) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

type UpdateCustomerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Customer      *Customer              `protobuf:"bytes,1,opt,name=customer,proto3" json:"customer,omitempty"` // detailed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCustomerResponse) Reset() {
	*x = UpdateCustomerResponse{}
	mi := &file_customers_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCustomerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerResponse) ProtoMessage() {}

func (x *UpdateCustomerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_customers_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerResponse.ProtoReflect.Descriptor instead.
func (*UpdateCustomerResponse) Descriptor() ([]byte, []int) {
	return file_customers_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateCustomerResponse) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

var File_customers_proto protoreflect.FileDescriptor

const file_customers_proto_rawDesc = "" +
	"\n" +
	"\x0fcustomers.proto\x12\x03api\x1a\toid.proto\x1a\x1cgoogle/api/annotations.proto\"\x13\n" +
	"\x11ServerInfoRequest\"&\n" +
	"\x12ServerInfoResponse\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\">\n" +
	"\fVerification\x12\x16\n" +
	"\x06errors\x18\x01 \x03(\tR\x06errors\x12\x16\n" +
	"\x06notify\x18\x02 \x03(\tR\x06notify\"\xa6\x01\n" +
	"\vLicenseUser\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04prod\x18\x02 \x01(\tR\x04prod\x12!\n" +
	"\x04user\x18\x03 \x01(\v2\r.api.ObjectIdR\x04user\x12\x14\n" +
	"\x05scope\x18\x06 \x03(\tR\x05scope\x12\x1b\n" +
	"\tissued_at\x18\x04 \x01(\x03R\bissuedAt\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x05 \x01(\x03R\texpiresAt\"\xaa\x02\n" +
	"\tLicenseV1\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"not_before\x18\x02 \x01(\x03R\tnotBefore\x12\x1b\n" +
	"\tnot_after\x18\x03 \x01(\x03R\bnotAfter\x12\x18\n" +
	"\aproduct\x18\x04 \x01(\tR\aproduct\x12\x14\n" +
	"\x05scope\x18\x05 \x03(\tR\x05scope\x12 \n" +
	"\vcompetitive\x18\x06 \x01(\bR\vcompetitive\x12\x14\n" +
	"\x05limit\x18\a \x01(\x05R\x05limit\x12\x16\n" +
	"\x06remain\x18\b \x01(\x05R\x06remain\x12&\n" +
	"\x05users\x18\t \x03(\v2\x10.api.LicenseUserR\x05users\x12)\n" +
	"\x06status\x18\n" +
	" \x01(\v2\x11.api.VerificationR\x06status\"\x9a\x04\n" +
	"\bCustomer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"created_at\x18\x02 \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"revoked_at\x18\x04 \x01(\x03R\trevokedAt\x12\"\n" +
	"\forganization\x18\x05 \x01(\tR\forganization\x12\x1b\n" +
	"\tissued_at\x18\x06 \x01(\x03R\bissuedAt\x12\x1d\n" +
	"\n" +
	"not_before\x18\a \x01(\x03R\tnotBefore\x12\x1b\n" +
	"\tnot_after\x18\b \x01(\x03R\bnotAfter\x12\x1f\n" +
	"\vthis_update\x18\t \x01(\x03R\n" +
	"thisUpdate\x12\x1f\n" +
	"\vnext_update\x18\n" +
	" \x01(\x03R\n" +
	"nextUpdate\x12)\n" +
	"\x06verify\x18\v \x01(\v2\x11.api.VerificationR\x06verify\x12.\n" +
	"\x05limit\x18\f \x03(\v2\x18.api.Customer.LimitEntryR\x05limit\x12(\n" +
	"\alicense\x18\x0e \x03(\v2\x0e.api.LicenseV1R\alicense\x12#\n" +
	"\x05dnsrv\x18\x0f \x03(\v2\r.api.ObjectIdR\x05dnsrv\x1a8\n" +
	"\n" +
	"LimitEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa2\x02\n" +
	"\x13LicenseUsageRequest\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x05R\x04size\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x16\n" +
	"\x06fields\x18\x03 \x03(\tR\x06fields\x12\x12\n" +
	"\x04sort\x18\x04 \x03(\tR\x04sort\x12!\n" +
	"\x04user\x18\x05 \x01(\v2\r.api.ObjectIdR\x04user\x12%\n" +
	"\x06domain\x18\x06 \x01(\v2\r.api.ObjectIdR\x06domain\x12\x1f\n" +
	"\vcustomer_id\x18\a \x01(\tR\n" +
	"customerId\x12\x0e\n" +
	"\x02id\x18\b \x03(\tR\x02id\x12\x18\n" +
	"\aproduct\x18\t \x03(\tR\aproduct\x12\x14\n" +
	"\x05valid\x18\n" +
	" \x01(\bR\x05valid\x12\f\n" +
	"\x01q\x18\v \x01(\tR\x01q\"d\n" +
	"\x14LicenseUsageResponse\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04next\x18\x02 \x01(\bR\x04next\x12$\n" +
	"\x05items\x18\x03 \x03(\v2\x0e.api.LicenseV1R\x05items\"\xaf\x01\n" +
	"\vProductUser\x12!\n" +
	"\x04user\x18\x01 \x01(\v2\r.api.ObjectIdR\x04user\x12%\n" +
	"\x06domain\x18\x02 \x01(\v2\r.api.ObjectIdR\x06domain\x12\x1b\n" +
	"\tissued_at\x18\x03 \x01(\x03R\bissuedAt\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x04 \x01(\x03R\texpiresAt\x12\x1a\n" +
	"\bsessions\x18\x05 \x01(\x05R\bsessions\"\x87\x01\n" +
	"\x13LicenseUsersRequest\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x05R\x04size\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x16\n" +
	"\x06fields\x18\x03 \x03(\tR\x06fields\x12\x12\n" +
	"\x04sort\x18\x04 \x03(\tR\x04sort\x12\x0e\n" +
	"\x02id\x18\x05 \x01(\tR\x02id\x12\f\n" +
	"\x01q\x18\x06 \x01(\tR\x01q\"f\n" +
	"\x14LicenseUsersResponse\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04next\x18\x02 \x01(\bR\x04next\x12&\n" +
	"\x05items\x18\x03 \x03(\v2\x10.api.ProductUserR\x05items\"\x8d\x01\n" +
	"\x12GetCustomerRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05valid\x18\x02 \x01(\bR\x05valid\x12%\n" +
	"\x06domain\x18\x03 \x01(\v2\r.api.ObjectIdR\x06domain\x12\x16\n" +
	"\x06fields\x18\n" +
	" \x03(\tR\x06fields\x12\x12\n" +
	"\x04sort\x18\v \x03(\tR\x04sort\"@\n" +
	"\x13GetCustomerResponse\x12)\n" +
	"\bcustomer\x18\x01 \x01(\v2\r.api.CustomerR\bcustomer\"\x98\x01\n" +
	"\x15UpdateCustomerRequest\x12\"\n" +
	"\forganization\x18\x01 \x01(\tR\forganization\x12!\n" +
	"\flogo_picture\x18\x02 \x01(\fR\vlogoPicture\x12 \n" +
	"\vcertificate\x18\x03 \x01(\fR\vcertificate\x12\x16\n" +
	"\x06revoke\x18\x04 \x01(\bR\x06revoke\"C\n" +
	"\x16UpdateCustomerResponse\x12)\n" +
	"\bcustomer\x18\x01 \x01(\v2\r.api.CustomerR\bcustomer2\x8c\x04\n" +
	"\tCustomers\x12O\n" +
	"\n" +
	"ServerInfo\x12\x16.api.ServerInfoRequest\x1a\x17.api.ServerInfoResponse\"\x10\x82\xd3\xe4\x93\x02\n" +
	"\x12\b/srvinfo\x12e\n" +
	"\vGetCustomer\x12\x17.api.GetCustomerRequest\x1a\x18.api.GetCustomerResponse\"#\x82\xd3\xe4\x93\x02\x1dZ\x10\x12\x0e/customer/{id}\x12\t/customer\x12\\\n" +
	"\x0eUpdateCustomer\x12\x1a.api.UpdateCustomerRequest\x1a\x1b.api.UpdateCustomerResponse\"\x11\x82\xd3\xe4\x93\x02\v\x1a\t/customer\x12\x85\x01\n" +
	"\fLicenseUsage\x12\x18.api.LicenseUsageRequest\x1a\x19.api.LicenseUsageResponse\"@\x82\xd3\xe4\x93\x02:Z\n" +
	"\x12\b/licenseZ\v\x12\t/products\x12\x1f/customer/{customer_id}/license\x12a\n" +
	"\fLicenseUsers\x12\x18.api.LicenseUsersRequest\x1a\x19.api.LicenseUsersResponse\"\x1c\x82\xd3\xe4\x93\x02\x16\x12\x14/products/{id}/usersBY\n" +
	"\acom.apiB\x0eCustomersProtoP\x01Z\x12webitel.go/api;api\xa2\x02\x03AXX\xaa\x02\x03Api\xca\x02\x03Api\xe2\x02\x0fApi\\GPBMetadata\xea\x02\x03Apib\x06proto3"

var (
	file_customers_proto_rawDescOnce sync.Once
	file_customers_proto_rawDescData []byte
)

func file_customers_proto_rawDescGZIP() []byte {
	file_customers_proto_rawDescOnce.Do(func() {
		file_customers_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_customers_proto_rawDesc), len(file_customers_proto_rawDesc)))
	})
	return file_customers_proto_rawDescData
}

var file_customers_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_customers_proto_goTypes = []any{
	(*ServerInfoRequest)(nil),      // 0: api.ServerInfoRequest
	(*ServerInfoResponse)(nil),     // 1: api.ServerInfoResponse
	(*Verification)(nil),           // 2: api.Verification
	(*LicenseUser)(nil),            // 3: api.LicenseUser
	(*LicenseV1)(nil),              // 4: api.LicenseV1
	(*Customer)(nil),               // 5: api.Customer
	(*LicenseUsageRequest)(nil),    // 6: api.LicenseUsageRequest
	(*LicenseUsageResponse)(nil),   // 7: api.LicenseUsageResponse
	(*ProductUser)(nil),            // 8: api.ProductUser
	(*LicenseUsersRequest)(nil),    // 9: api.LicenseUsersRequest
	(*LicenseUsersResponse)(nil),   // 10: api.LicenseUsersResponse
	(*GetCustomerRequest)(nil),     // 11: api.GetCustomerRequest
	(*GetCustomerResponse)(nil),    // 12: api.GetCustomerResponse
	(*UpdateCustomerRequest)(nil),  // 13: api.UpdateCustomerRequest
	(*UpdateCustomerResponse)(nil), // 14: api.UpdateCustomerResponse
	nil,                            // 15: api.Customer.LimitEntry
	(*ObjectId)(nil),               // 16: api.Id
}
var file_customers_proto_depIdxs = []int32{
	16, // 0: api.LicenseUser.user:type_name -> api.Id
	3,  // 1: api.LicenseV1.users:type_name -> api.LicenseUser
	2,  // 2: api.LicenseV1.status:type_name -> api.Verification
	2,  // 3: api.Customer.verify:type_name -> api.Verification
	15, // 4: api.Customer.limit:type_name -> api.Customer.LimitEntry
	4,  // 5: api.Customer.license:type_name -> api.LicenseV1
	16, // 6: api.Customer.dnsrv:type_name -> api.Id
	16, // 7: api.LicenseUsageRequest.user:type_name -> api.Id
	16, // 8: api.LicenseUsageRequest.domain:type_name -> api.Id
	4,  // 9: api.LicenseUsageResponse.items:type_name -> api.LicenseV1
	16, // 10: api.ProductUser.user:type_name -> api.Id
	16, // 11: api.ProductUser.domain:type_name -> api.Id
	8,  // 12: api.LicenseUsersResponse.items:type_name -> api.ProductUser
	16, // 13: api.GetCustomerRequest.domain:type_name -> api.Id
	5,  // 14: api.GetCustomerResponse.customer:type_name -> api.Customer
	5,  // 15: api.UpdateCustomerResponse.customer:type_name -> api.Customer
	0,  // 16: api.Customers.ServerInfo:input_type -> api.ServerInfoRequest
	11, // 17: api.Customers.GetCustomer:input_type -> api.GetCustomerRequest
	13, // 18: api.Customers.UpdateCustomer:input_type -> api.UpdateCustomerRequest
	6,  // 19: api.Customers.LicenseUsage:input_type -> api.LicenseUsageRequest
	9,  // 20: api.Customers.LicenseUsers:input_type -> api.LicenseUsersRequest
	1,  // 21: api.Customers.ServerInfo:output_type -> api.ServerInfoResponse
	12, // 22: api.Customers.GetCustomer:output_type -> api.GetCustomerResponse
	14, // 23: api.Customers.UpdateCustomer:output_type -> api.UpdateCustomerResponse
	7,  // 24: api.Customers.LicenseUsage:output_type -> api.LicenseUsageResponse
	10, // 25: api.Customers.LicenseUsers:output_type -> api.LicenseUsersResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_customers_proto_init() }
func file_customers_proto_init() {
	if File_customers_proto != nil {
		return
	}
	file_oid_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_customers_proto_rawDesc), len(file_customers_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_customers_proto_goTypes,
		DependencyIndexes: file_customers_proto_depIdxs,
		MessageInfos:      file_customers_proto_msgTypes,
	}.Build()
	File_customers_proto = out.File
	file_customers_proto_goTypes = nil
	file_customers_proto_depIdxs = nil
}
